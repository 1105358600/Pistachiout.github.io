<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pistachiout的博客</title>
  
  <subtitle>每天多学一点知识,就少写一行代码</subtitle>
  <link href="https://pistachiout.github.io/atom.xml" rel="self"/>
  
  <link href="https://pistachiout.github.io/"/>
  <updated>2023-03-09T10:05:22.894Z</updated>
  <id>https://pistachiout.github.io/</id>
  
  <author>
    <name>Pistachiout</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Hypledger Fabric的学历学位认证管理系统</title>
    <link href="https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8EHyperledger%20Fabric%E7%9A%84%E5%AD%A6%E5%8E%86%E5%AD%A6%E4%BD%8D%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8EHyperledger%20Fabric%E7%9A%84%E5%AD%A6%E5%8E%86%E5%AD%A6%E4%BD%8D%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-09T09:37:17.275Z</published>
    <updated>2023-03-09T10:05:22.894Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="基于Hyperledger-Fabric的学位学历认证管理系统"><a href="#基于Hyperledger-Fabric的学位学历认证管理系统" class="headerlink" title="基于Hyperledger Fabric的学位学历认证管理系统"></a>基于Hyperledger Fabric的学位学历认证管理系统</h1><h2 id="项目源码：https-github-com-Pistachiout-Academic-Degree-BlockChain"><a href="#项目源码：https-github-com-Pistachiout-Academic-Degree-BlockChain" class="headerlink" title="项目源码：https://github.com/Pistachiout/Academic-Degree-BlockChain"></a>项目源码：<a href="https://github.com/Pistachiout/Academic-Degree-BlockChain">https://github.com/Pistachiout/Academic-Degree-BlockChain</a></h2><h2 id="一、选题背景"><a href="#一、选题背景" class="headerlink" title="一、选题背景"></a>一、选题背景</h2><p>学历造假、认证造假等是一个全球日益普遍的现象，不仅对社会产生了巨大的负面影响，同时也极大增加了企业和单位的用人成本，造成了无谓的经济消耗；从另一个角度来说，纸质或电子版的证书无论从保存便利性、验证可靠性、可信性等方面，都存在着很大的不足。一种高度可靠、易保存、易证伪同时还顾全隐私保护的学位学历认证管理系统，是一个必然的需求。<br>区块链是非中心化信任网络，适合作为此类分布式应用的底层架构和基础工具。区块链具有两大核心特点：一是数据难以篡改、二是去中心化。区块链所记录的信息更加真实可靠，可以帮助解决人们互不信任的问题。</p><h2 id="二、功能分析"><a href="#二、功能分析" class="headerlink" title="二、功能分析"></a>二、功能分析</h2><p>由于系统需要保证人才受教育情况真实性，所以对于系统的用户而言，不可能由用户自己添加相应的学历信息，而是由具有一定权限的用户来完成添加或修改的功能。但普通用户可以通过系统溯源功能来确定信息的真伪。所以我们将系统用户的使用角色分为两种：</p><ul><li>普通用户 </li><li>管理员用户</li></ul><p>普通用户具有对数据的查询功能 ，但实现查询之前必须经过登录认证：</p><ul><li>用户登录：系统只针对合法用户进行授权使用，所以用户必须先进行登录才能完成相应的功能。   </li><li>查询实现：查询分为两种方式实现<ul><li>根据证书编号与姓名查询：根据用户输入的证书编号与姓名进行查询。</li><li>根据身份证号码查询：根据用户输入指定的身份证号码进行查询，此功能可以实现溯源。</li></ul></li></ul><p>管理员用户除具有普通用户的功能之外，额外添加了两个功能：</p><ul><li>添加信息：可以向系统中添加新的学历信息。 </li><li>修改信息：针对已存在的学历信息进行修改。</li></ul><p>最后需要达到的要求</p><pre><code>1. 认证颁发时的数据生成和上链流程； 2. 认证验证时的验证方法：核实电子证书文件的哈希值；3. 用户界面：证书生成、证书上链、证书查询、证书核验；4. 安全和隐私保护。</code></pre><h2 id="三、架构设计"><a href="#三、架构设计" class="headerlink" title="三、架构设计"></a>三、架构设计</h2><p>在此应用中需要编写实现完整的链码并通过业务层调用链码中的各个函数，以实现对数据状态的操作。界面为了方便用户操作使用，使用Web浏览器的方式实现。而且在此应用中我们将 Hyperledger Fabric 默认的状态数据库由 LevelDB 替换为 CouchDB 来实现<br><img data-src="https://img-blog.csdnimg.cn/8b6db7a96a764035a518f029d101a3dc.png" alt="系统架构设计"><br>Fabric Network 结构包括几个组件，如 CA、MSP、Orderer 等 ，如下图所示<br>    1. CA 代表证书颁发机构。它负责颁发和管理数字证书，用于识别 Fabric Network 中的参与者 。<br>    2. MSP 代表成员服务提供商。它定义了验证网络参与者身份和角色的规则和策略 。<br>    3. Orderer 是一个节点，它将交易排序成区块，并将它们发送给对等节点 。<br>    4. Org1 是属于 Fabric Network 的一个组织的例子。它可以有自己的 CA、MSP、策略和通道 。<br>    5. Peer0 和 Peer1 是属于 Org1 的两个节点。它们存储账本的副本并执行链码（智能合约）。<br>       <img data-src="https://img-blog.csdnimg.cn/20bde1f70a8f470e854da18887f6667f.png" alt="Fabric Network设计"></p><h2 id="四、数据模型设计"><a href="#四、数据模型设计" class="headerlink" title="四、数据模型设计"></a>四、数据模型设计</h2><p>由于需要向分类账本中保存数据，所以必须设计相关的结构体用于声明要保存的数据结构，用于方便的在应用中处理数据。</p><table><thead><tr><th>名称</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>ObjectType</td><td>string</td><td></td></tr><tr><td>Name</td><td>string</td><td>姓名</td></tr><tr><td>Gender</td><td>string</td><td>性别</td></tr><tr><td>Nation</td><td>string</td><td>民族</td></tr><tr><td>EntityID</td><td>string</td><td>身份证号（记录的Key）</td></tr><tr><td>Place</td><td>string</td><td>籍贯</td></tr><tr><td>BirthDay</td><td>stirng</td><td>出生日期</td></tr><tr><td>Photo</td><td>string</td><td>照片</td></tr><tr><td>EnrollDate</td><td>string</td><td>入学日期</td></tr><tr><td>GraduationDate</td><td>string</td><td>毕（结）业日期</td></tr><tr><td>SchoolName</td><td>string</td><td>所读学校名称</td></tr><tr><td>Major</td><td>string</td><td>所读专业</td></tr><tr><td>QuaType</td><td>string</td><td>学历类别（普通、成考等）</td></tr><tr><td>Length</td><td>string</td><td>学制（两年、三年、四年、五年）</td></tr><tr><td>Mode</td><td>string</td><td>学习形式（普通全日制）</td></tr><tr><td>Level</td><td>string</td><td>层次（专科、本科、研究生、博士）</td></tr><tr><td>Graduation</td><td>string</td><td>毕（结）业（毕业、结业）</td></tr><tr><td>CertNo</td><td>string</td><td>证书编号</td></tr><tr><td>Historys</td><td>[]HistoryItem</td><td>当前edu的详细历史记录</td></tr></tbody></table><p>为了能够从当前的分类状态中查询出详细的历史操作记录，我们在 <code>Education</code> 中设计了一个类型为<code>HistoryItem</code> 数组的 <code>Historys</code> 成员，表示当前状态的历史记录集。<br>HistoryItem 结构体设计如下表所示： </p><table><thead><tr><th>名称</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>TxId</td><td>string</td><td>交易编号</td></tr><tr><td>Education</td><td>Education</td><td>本次历史记录的详细信息</td></tr></tbody></table><h2 id="五、原型交互设计"><a href="#五、原型交互设计" class="headerlink" title="五、原型交互设计"></a>五、原型交互设计</h2><p><a href="https://js.design/v?i=8znNXl&p=R9WgEyOBdM&f=iGC6qsWuq2qnKAa_mCCcF">https://js.design/v?i=8znNXl&p=R9WgEyOBdM&f=iGC6qsWuq2qnKAa_mCCcF</a></p><h2 id="六、链码API操作"><a href="#六、链码API操作" class="headerlink" title="六、链码API操作"></a>六、链码API操作</h2><p><img data-src="https://img-blog.csdnimg.cn/e84fd3f383404f25b012ef1d4ac157c4.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/c8976ad44d814c4aac11ae323c2aabec.png" alt="在这里插入图片描述"></p><h2 id="七、数据存储"><a href="#七、数据存储" class="headerlink" title="七、数据存储"></a>七、数据存储</h2><p><code>链上数据</code>是直接或者间接由区块链共识产生的数据，一般包括<code>区块链节点数据</code>与<code>智能合约代码</code>等</p><p><code>区块链节点数据</code>包括区块数据和状态数据两者<br>1.<strong>区块数据</strong>描述区块自身信息数据，实际是区块链上面发生的每一笔交易的记录（如添加学历信息，修改学历信息及对应的时间戳）<br>2.<strong>状态数据</strong>则是记录了每个账户和智能合约的当前状态（如张三的学历信息）</p><p>区块链节点的数据存储最普遍的方式就是存入我们的磁盘中间，而我们的区块链不会直接的访问我们的磁盘，而是通过特定的数据库如LevelIDB，CouchDB等独立和分布式的数据库来操作我们的数据<br><img data-src="https://img-blog.csdnimg.cn/d7c8ffd0e7c745f5812dc25fd08f279c.png" alt="在这里插入图片描述"><br>本项目选用CouchDB作为存储链上数据的数据库</p><h2 id="八、Fabric优势"><a href="#八、Fabric优势" class="headerlink" title="八、Fabric优势"></a>八、Fabric优势</h2><pre><code>1. 1.所有上链数据基于密码学数字签名，上链数据不可被第三方篡改，不可抵赖。2. 基于多参与方的共识算法，防止单方面作恶，修改自己链上历史数据。3. Fabric淡化了去中心化(Decentralized)，而以分布式 (Distributed)代替，每个节点具有完整全账本，防止单机故障和数据丢失。4. .fabric采用中心化的CA机制来发放证书，只有持有有效证书的节点和用户才可以访问区块链上的账本数据，此外还有TLS加密通讯、通道隔离等技术，保证了数据的传播范围可控，防止数据被窃取。</code></pre><p>Fabric充分利用了模块化的设计、容器技术和密码学技术，使得系统具有可扩展、灵活和安全等特性。采用传统数据库或许可以实现部分区块链的功能，如设计只写数据库，设计访问权限，共享数据库，分布式协议等，但这不是数据库的功能，只是创造出一个另一种形势的“区块链”，传统数据库无法达到区块链的分布式和信任。</p><h2 id="十、功能演示"><a href="#十、功能演示" class="headerlink" title="十、功能演示"></a>十、功能演示</h2><p><code>http://ip:9000/</code></p><p><img data-src="https://img-blog.csdnimg.cn/31199d7edade44348bd0f505d07bc8a6.png" alt="在这里插入图片描述"></p><p>输入管理员账号及密码登录验证成功，则进入系统首页面<br><img data-src="https://img-blog.csdnimg.cn/22ea8c6344a6492898abe8a5ea669af7.png" alt="在这里插入图片描述"><br>在首页面中点击 查询范围链接，进入 help页面，<br><img data-src="https://img-blog.csdnimg.cn/ab9ba76d5859446abc896072a4e39022.png" alt="在这里插入图片描述"><br>点击添加学历信息链接进入，添加学历信息页面<br><img data-src="https://img-blog.csdnimg.cn/d8ad47283e15407ba577946d0870e06e.png" alt="在这里插入图片描述"></p><p>根据学历证书编号与姓名查询页面</p><p><img data-src="https://img-blog.csdnimg.cn/6eb9a4566e014643916a02768db3300b.png" alt="在这里插入图片描述"></p><p>根据身份证号码查询页面<br><img data-src="https://img-blog.csdnimg.cn/b6a0c7e041f14acf9f56e818ed7d0892.png" alt="在这里插入图片描述"></p><p>根据身份证号码查询页面查询结果页面<br><img data-src="https://img-blog.csdnimg.cn/f32a23f83f2848b29e161492077c39e4.png" alt="在这里插入图片描述"></p><p>编辑页面<br><img data-src="https://img-blog.csdnimg.cn/110899e562ec40b5a8be1878ca3c4a08.png" alt="在这里插入图片描述"></p><p>编辑成功自动跳转到根据身份证号码查询结果页面<br><img data-src="https://img-blog.csdnimg.cn/04a8d43cff924b81aa070af98811ccbf.png" alt="在这里插入图片描述"></p><h2 id="十一、Hyperledger-explorer——Fabric浏览器"><a href="#十一、Hyperledger-explorer——Fabric浏览器" class="headerlink" title="十一、Hyperledger explorer——Fabric浏览器"></a>十一、Hyperledger explorer——Fabric浏览器</h2><p><code>http://ip:8080/</code><br>Hyperledger Explorer是一个简单易用的开源工具，可以用于监视 区块链网络中的活动。Hyperledger Explorer支持Fabric、Iroha等 多种区块链，可以运行在MocOS和Ubuntu下。我们可以在这里看到链上的所有信息，例如交易的时间、区块的哈希值和数据的哈希值等。<br><img data-src="https://img-blog.csdnimg.cn/ca5ff9c9f12f4eebbe1cc1fc94c50be9.png" alt="Hyperledger explorer"></p><p><img data-src="https://img-blog.csdnimg.cn/1df2910d9cc24149be0528436b919a7a.png" alt="区块细节"><br><img data-src="https://img-blog.csdnimg.cn/84fc120ed80e4114bb47c92dd2547d98.png" alt="交易细节"></p><p><img data-src="https://img-blog.csdnimg.cn/0181506c17824261bf6ddcb2703f20c1.png" alt="Fabric网络"><br><img data-src="https://img-blog.csdnimg.cn/ccd0acaf95e04df999cf758dd536833d.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/f99b4201de654b049c39d632e47e16a5.png" alt="在这里插入图片描述"></p><h2 id="十二、分布式数据库"><a href="#十二、分布式数据库" class="headerlink" title="十二、分布式数据库"></a>十二、分布式数据库</h2><p>peer0节点7051端口 <code>http://ip:5984/_utils</code></p><p>peer1节点9051端口 <code>http://ip:7984/_utils</code></p><p><img data-src="https://img-blog.csdnimg.cn/4aaa814726204c64bba19f534ef39bc7.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/e74c46fbb3c341d1b75a54bc9e331967.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/22192eb759314993baeb3f72377343c5.png" alt="在这里插入图片描述"></p><h2 id="十三、不可篡改性"><a href="#十三、不可篡改性" class="headerlink" title="十三、不可篡改性"></a>十三、不可篡改性</h2><p>CouchDB数据库存取链上数据，将学历信息等数据写入到数据库，窜改数据库的数据时链上的数据没有改变，查询时返回数据为链上数据，所以篡改数据库不可修改系统返回数据。<br><img data-src="https://img-blog.csdnimg.cn/8f3162fd34514743ad68e648dbb0c912.png" alt="篡改后的数据"><br><img data-src="https://img-blog.csdnimg.cn/026846e1adcc49689b56cef5ae52bc7d.png" alt="在这里插入图片描述"></p><h2 id="十四、项目部署"><a href="#十四、项目部署" class="headerlink" title="十四、项目部署"></a>十四、项目部署</h2><h3 id="1-部署环境"><a href="#1-部署环境" class="headerlink" title="1.部署环境"></a>1.部署环境</h3><p>•阿里云主机 Ubuntu 16.04 64 位（root 用户）<br>•Golang 语言 go1.17<br>•docker 18.09.7<br>•docker-compose 1.22.0</p><h3 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h3><h4 id="2-1安装-docker-以及-docker-compose"><a href="#2-1安装-docker-以及-docker-compose" class="headerlink" title="2.1安装 docker 以及 docker-compose"></a>2.1安装 docker 以及 docker-compose</h4><p>使用 docker 可以方便的解决程序依赖的环境问题；并且后续需要使用到的 Hyperledger Fabric 框架官方也提供了相应的 docker 的容器。<br>安装 docker 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure><p>验证 docker 成功安装：docker version，结果如图所示：<br><img data-src="https://img-blog.csdnimg.cn/2747b94a14f34c9698d8d6a3bef4c100.png" alt="docker 安装成功"></p><p>为了方便管理多个 docker 容器，还需要安装 docker-compose：sudo apt install docker- compose；验证安装成功：docker-compose version；如图所示：</p><p><img data-src="https://img-blog.csdnimg.cn/ffb878a022a949fe89d388a0ad8127ca.png" alt="docker-compose 安装成功"></p><h4 id="2-2安装-golang"><a href="#2-2安装-golang" class="headerlink" title="2.2安装 golang"></a>2.2安装 golang</h4><p>区块链框架Hyperledger Fabric 目前支持Java、Go 等主流编程语言并提供了相应的SDK，但是支持最全面的还是 Golang，因此采用 Go 语言来进行开发是比较好的选择；</p><pre><code>1. 安装 Golang： wget  https://dl.google.com/go/go1.17.0.linux-amd64.tar.gz2. .使用 tar 命令将压缩文件解压至指定路径/usr/local/下： tar -zxvf go1.17.0.linux-amd64.tar.gz -C /usr/local3. 最后是设置环境变量 GOHOME 以及 GOROOT： sudo vim /etc/profile 添加如下（当前用户为 root 用户，$HOME=/root）：    </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go </span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/local/go，</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOROOT</span>/bin:</span><br></pre></td></tr></table></figure><pre><code>4. $PATH 激活环境变量： source /etc/profile5. 验证安装成功，使用 go version 结果如图所示：</code></pre><p><img data-src="https://img-blog.csdnimg.cn/d449c551a6d449d7a640752149be939c.png" alt="Golang 安装成功"></p><h3 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3.项目部署"></a>3.项目部署</h3><pre><code>1. 创建保存项目的文件夹： mkdir -p $GOPATH/src2. 进入文件夹： cd $GOPATH/src3. 从 github 仓库克隆项目： git clone https://github.com/bug-away-away/BlockChainCreditSystem.git4. 进入项目目录：cd education5. 添加项目开发需要依赖的 Golang 包：go mod tidy   命令可能会执行失败，此时设置代理即可：go env -w GOPROXY=https://goproxy.cn</code></pre><h3 id="4-启动项目"><a href="#4-启动项目" class="headerlink" title="4.启动项目"></a>4.启动项目</h3><p>由于每次启动流程相对固定，因此编写脚本来自动清理 docker 然后启动项目在项目的目录下运行 clean_docker.sh 脚本即可启动项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clean_docker.sh</span><br></pre></td></tr></table></figure><p>项目启动成功的结果如图所示：</p><p><img data-src="https://img-blog.csdnimg.cn/7c55555eeed94d9bbacd18cd7d7bb05e.png" alt="启动项目成功"></p><p>通过浏览器访问 9000 端口即可进入 web 端，结果如图所示：</p><p>: <img data-src="https://img-blog.csdnimg.cn/c5a33dd311bd46c792da068a291b3839.png" alt="启动项目成功"></p><h2 id="十五、总结"><a href="#十五、总结" class="headerlink" title="十五、总结"></a>十五、总结</h2><p>基于区块链的学历学位认证系统是一个利用区块链技术来防止学历造假的项目。该项目使用了go语言和Hyperledger Fabric超级账本框架，实现了以下功能：</p><ul><li>增加学历：用户可以通过智能合约向区块链系统中添加自己的学历信息。</li><li>修改学历：用户可以通过智能合约修改自己在区块链系统中的学历信息，但是修改后的信息会留下痕迹，方 便追溯。</li><li>查询学历：用户可以通过智能合约查询自己或者其他用户在区块链系统中的学历信息，验证其真伪。</li></ul><p>该项目有以下优点和创新点：</p><pre><code>1. 使用了Fabric与Couchdb数据库，实现了分布式数据库与不可篡改性。Fabric是一个支持多种共识机制和智能合约语言的企业级区块链平台，Couchdb是一个面向文档的数据库，可以存储复杂结构化数据，并支持富查询功能。Fabric账本是有序的、不可篡改的状态转换记录，包括区块链和世界状态两部分。区块链中保存着不可变的顺序记录，包含配置记录和交易记录。世界状态中维护账本的当前状态，方便应用快速查询。2. 使用了HyperledgerExplorer，实现了对区块链网络和数据的可视化监控。Explorer是一个基于web的应用程序，可以展示区块链网络中的节点、通道、交易、合约等信息，并提供图表和统计分析功能。用户可以通过浏览器查看网络中的信息，包括网络拓扑、区块信息、链码信息等等。</code></pre><p>该项目遇到了以下困难和挑战：</p><ul><li>Fabric框架涉及多个组件和配置文件，需要花费较多时间来理解和搭建。</li><li>Couchdb数据库需要创建索引来优化查询性能，并且需要考虑数据同步和一致性问题。</li><li>Explorer应用程序需要与Fabric网络进行集成，并且需要适配不同版本和配置。</li></ul><p>该项目有以下不足和改进空间：</p><ul><li>学历信息只能由用户自己添加和修改，没有第三方机构来审核和认证。</li><li>学历信息没有加密处理，可能存在隐私泄露风险。</li><li>Explorer应用程序没有提供用户认证和权限控制功能。&#96;</li></ul><p>通过参加这个项目实训，我不仅学习了go语言和Fabric框架，还深入了解了区块链技术的原理和应用。我感受到了区块链技术在学历认证领域的优势和潜力，也体会到了开发区块链应用的难度和挑战。这个项目让我收获了很多知识和经验，也激发了我对区块链技术的兴趣和热情。</p>]]></content>
    
    
    <summary type="html">基于区块链的学历学位认证系统是一个利用区块链技术来防止学历造假的项目。增加学历：用户可以通过智能合约向区块链系统中添加自己的学历信息。修改学历：用户可以通过智能合约修改自己在区块链系统中的学历信息，但是修改后的信息会留下痕迹，方 便追溯。查询学历：用户可以通过智能合约查询自己或者其他用户在区块链系统中的学历信息，验证其真伪。使用了Fabric与Couchdb数据库，实现了分布式数据库与不可篡改性。</summary>
    
    
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="区块链" scheme="https://pistachiout.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="区块链" scheme="https://pistachiout.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Golange刷题语法笔记</title>
    <link href="https://pistachiout.github.io/wiki/Golang%E7%89%88LeetCode%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E5%87%BD%E6%95%B0/"/>
    <id>https://pistachiout.github.io/wiki/Golang%E7%89%88LeetCode%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95%E5%87%BD%E6%95%B0/</id>
    <published>2023-02-16T10:54:55.683Z</published>
    <updated>2023-02-23T08:58:59.305Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-二维数组"><a href="#1-二维数组" class="headerlink" title="1.二维数组"></a>1.二维数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> matrix := <span class="built_in">make</span>([][]<span class="type">int</span>, m)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> matrix &#123;</span><br><span class="line">        matrix[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> ans := <span class="built_in">make</span>([][]<span class="type">int</span>,<span class="number">0</span>)<span class="comment">//动态二维数组，初始化或清除所以元素</span></span><br><span class="line">ans =<span class="built_in">append</span>(ans,[]<span class="type">int</span> )<span class="comment">//添加元素</span></span><br></pre></td></tr></table></figure><h3 id="2-排序"><a href="#2-排序" class="headerlink" title="2.排序"></a>2.排序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count:=[<span class="number">2002</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">arrColne := <span class="built_in">append</span>([]<span class="type">int</span>&#123;&#125;, arr...)<span class="comment">//克隆一个新数组</span></span><br><span class="line">sort.Ints（count[:]）<span class="comment">//[2002]int 与[]int 不是一种类型，要先变成切片后再排序</span></span><br><span class="line"><span class="comment">//go语言没有返回数组最小的min函数，需要自己定义</span></span><br><span class="line"></span><br><span class="line">sort.Ints(arr)<span class="comment">//从小到大</span></span><br><span class="line">sort.Sort(sort.Reverse(sort.IntSlice(arr)))<span class="comment">//从大到小</span></span><br><span class="line">sort.Slice(nums, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums[i] &gt; nums[j]</span><br><span class="line">&#125;)<span class="comment">//自定义排序从大到小</span></span><br><span class="line"></span><br><span class="line">sort.Slice(index, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">a, b := array[index[i]], array[index[j]]</span><br><span class="line"><span class="keyword">return</span> a &lt; b || (a == b &amp;&amp; index[i] &lt; index[j])</span><br><span class="line">&#125;)<span class="comment">/*array[i] = count</span></span><br><span class="line"><span class="comment">index[i] = i</span></span><br><span class="line"><span class="comment">自定义排序，实现index下标根据arr的值排序*/</span></span><br></pre></td></tr></table></figure><h3 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">strings.ContainsAny（str1.str2）<span class="comment">//判断str1中是否存在str2</span></span><br><span class="line">strings.Count(str1, str2)<span class="comment">//判断字符串str2在字符串str1中的个数</span></span><br><span class="line"></span><br><span class="line"><span class="type">string</span>(<span class="string">&#x27;a&#x27;</span>)<span class="comment">//int，字符转字符串</span></span><br><span class="line">strconv.Atoi() (<span class="type">int</span>, <span class="type">error</span>)<span class="comment">//字符串转int</span></span><br><span class="line">strconv.Itoa()<span class="comment">//int转字符串,如需要int每一位值时可使用Itoa+Atoi</span></span><br><span class="line">bytes:=<span class="type">byte</span>[]  str:=<span class="type">string</span>(a)<span class="comment">//byte数组转string</span></span><br><span class="line">str[i]<span class="comment">//下标遍历只读，不能修改</span></span><br><span class="line">strBytes := []<span class="type">byte</span>(str)<span class="comment">//修改string，需要将 string 转为 []byte 修改后</span></span><br><span class="line">unicode.IsDigit(c)<span class="comment">//判断是否是字符串</span></span><br></pre></td></tr></table></figure><h3 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v:=<span class="keyword">range</span> arr<span class="comment">//v为下标</span></span><br><span class="line"><span class="keyword">for</span> _,v:=<span class="keyword">range</span> arr<span class="comment">//v为数值，注意用for each时，若只需要arr[i]，一定要在前面加上_，不然返回的是i</span></span><br><span class="line">next：<span class="keyword">for</span> &#123;&#125;<span class="keyword">continue</span> next<span class="comment">//在遍历时如果要退出可使用continue退出多重循环</span></span><br></pre></td></tr></table></figure><h3 id="5-位运算"><a href="#5-位运算" class="headerlink" title="5.位运算"></a>5.位运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&amp;=x-<span class="number">1</span><span class="comment">//求x二进制中1的个数</span></span><br></pre></td></tr></table></figure><h3 id="6-数组插入"><a href="#6-数组插入" class="headerlink" title="6.数组插入"></a>6.数组插入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(res[i+<span class="number">1</span>:], res[i:]) </span><br><span class="line">res[i] = num <span class="comment">//将数组下标i后面的copy到下标i+1，然后插入到下标i处</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Golange刷题语法笔记，记录学习GOLang编写LeetCode时遇到的语法</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    <category term="GoLang" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/GoLang/"/>
    
    
    <category term="算法" scheme="https://pistachiout.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="GoLang" scheme="https://pistachiout.github.io/tags/GoLang/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式实践——线上购物系统</title>
    <link href="https://pistachiout.github.io/wiki/C++%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E7%BA%BF%E4%B8%8A%E8%B4%AD%E7%89%A9%E7%B3%BB%E7%BB%9F/"/>
    <id>https://pistachiout.github.io/wiki/C++%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5%E2%80%94%E2%80%94%E7%BA%BF%E4%B8%8A%E8%B4%AD%E7%89%A9%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-02-16T10:54:55.668Z</published>
    <updated>2023-03-09T10:11:52.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、系统的主要目标与功能"><a href="#一、系统的主要目标与功能" class="headerlink" title="一、系统的主要目标与功能"></a>一、系统的主要目标与功能</h2><p>　 　&amp;emsp;  在本次设计中，考虑到目前疫情反复不断，为了方便群众，超市都推出在线购物并有配送员送货，于是我设计了一个超市在线网上购物送货的系统，这个系统的主要目标是帮助人们在家里购买自己需要的套餐，充值账户，同时该系统能查看自己的历史金额变动记录，也能够撤销前一次操作，这样能够帮助疫情期间的人们快速购物，也能够减少疫情期间出门购物的可能带来的危害。本超市目前功能如下：</p><pre><code>1. 查看超市套餐 2. 购买超市套餐 3. 给账户充值 4. 查看历史余额记录 5. 撤回上次操作  6. 系统自动提示配送员7. 退出本超市在线购物系</code></pre><p>系统运行比较简单，且每一步完成后都会有提示信息，按照提示信息一步一步运行即可。</p><h2 id="二-、系统中使用的设计模式（UML类图、详细描述场景、解决的问题、模式的效果及意义）"><a href="#二-、系统中使用的设计模式（UML类图、详细描述场景、解决的问题、模式的效果及意义）" class="headerlink" title="二 、系统中使用的设计模式（UML类图、详细描述场景、解决的问题、模式的效果及意义）"></a>二 、系统中使用的设计模式（UML类图、详细描述场景、解决的问题、模式的效果及意义）</h2><p><img data-src="https://img-blog.csdnimg.cn/29e716d5d65f48d99204337830559ccc.png" alt="在这里插入图片描述"></p><h2 id="•1-状态模式："><a href="#•1-状态模式：" class="headerlink" title="•1.状态模式："></a><strong>•1.状态模式</strong>：</h2><p>　　&amp;emsp;对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。在一个对象内在状态改变时也改变了其行为，这个对象看起来像改变了其类，因此选择使用状态模式。<br>•<img data-src="https://img-blog.csdnimg.cn/26ccc7b527f34157b74efdbf82c669bf.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>•设计思路</strong>：在本系统中，状态模式在购物时提供用户信息和余额的信息，分别为正常状态GreenState，欠款状态RedState与会员VIP状态。在进入程序时便初始化账户Account，通过这个账户记录余额balance信息，同时考虑到余额不足时不能购物，考虑到特殊情况，设计余额不足购买时允许赊欠，但当前余额小于0时不能购物，这样是考虑到实际，余额小于0时是不能购买的；此外若充值后余额超过1000元，则当前状态变为VIP模式，之后购买商品可以有8折优惠。</p><p>　　&amp;emsp;<strong>程序设计</strong>：Account中有属性state来聚合AccountState记录当前Account的状态，且有RedState，GreenState，VIP三个子状态继承AccountState，AccountState中有balance余额属性，在每个子状态里面有stateCheck()函数，可以在调用该函数后判断balance的数值，来改变当前Account所处的状态，并在改变状态后改变消费的行为。Accout有函数deposit和withdraw，分别是存款和取款来对balance进行操作，并会根据属性state的不同有不同的行为。</p><p><img data-src="https://img-blog.csdnimg.cn/47bb147acd374c86b3379b22faaa7771.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/4767464811d04431832e9446cf9e97f3.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/c1cb76901ed74fc8b414b58ab9178f6b.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/076a5b76f65747e0adf2116e18e7fa72.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;Account中有属性msStrategy，这是与策略模式结合的属性，在代码中设计的为若状态为GreenState或RedState，即初试化为MessageStrategy2直接在窗口输出，若为VIP状态，则初试化为MessageStrategy1，产生MessageBox弹窗通知。<br><img data-src="https://img-blog.csdnimg.cn/d9bf52d8586a4a3ab5313936ab14273d.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/5614c4e5f8c64d419ed0105546c0077e.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/a09519a9b8ef4fd0a51aaee7c9b37494.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/f8a55f4b0a7e4fa29d202a895d789934.png" alt="在这里插入图片描述"></p><h2 id="•2-建造者模式"><a href="#•2-建造者模式" class="headerlink" title="•2.建造者模式"></a><strong>•2.建造者模式</strong></h2><p>　　&amp;emsp;建筑者模式封装一个产品的构造过程, 并允许按步骤构造. 将一个复杂对象的构建与它的表示分离, 使得同样的构建过程可以创建不同的表示。<br>•<img data-src="https://img-blog.csdnimg.cn/94beb1b41bca43669c0041bb97a01e38.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>设计思路</strong>：在本系统中建造者模式可用于构建不同的套餐1，套餐2，套餐3，由超市Supermarket作为指挥者，将套餐的内部表象与生成过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象Product，并且使客户便于查看各个套餐的内容与价格便于购买。</p><p>　　&amp;emsp;<strong>程序设计</strong>：首先Supermarket是系统中建造者模式的Director指导者，拥有Construct()函数，且拥有Builder类的bld属性，使用Construct（）即可调佣bld中的BuildPartA，B，C函数，来构建出Product产品类，从而返回Product完成建造，将Product的复杂构造在ConcreteBuilder内实现，而Supermarket只需要设置不同的bld属性和调用Construct（）函数，即可创建不同的产品，实现产品构建的封装。</p><p><img data-src="https://img-blog.csdnimg.cn/b3f91294bfa547348d77f97e5ca6d8a3.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/d41a8aabb9b14d50a2905f208938b4e4.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/1570761ef9b04a728ff8bff0335e279a.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/0f56134ea6184bb68caccb6d60d0581f.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/01b08cd82f314f2cab539df0df2c4d5e.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/ebd822a475e0444b9725b66f5f4a976a.png" alt="在这里插入图片描述"></p><h2 id="•3-观察者模式"><a href="#•3-观察者模式" class="headerlink" title="•3.观察者模式"></a><strong>•3.观察者模式</strong></h2><p>　　&amp;emsp;观察者模式建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应作出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展。<br><img data-src="https://img-blog.csdnimg.cn/68453b4ddf944f9cb77bd6c6af4a1716.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>设计思路</strong>：在本系统中，观察者模式的观察目标为商家系统Supermarket，具体观察者为配送员DeliveryObserver，多个配送员DeliveryObserver观察对应的商家系统Supermarket，当有客户在商家购买套餐时，商家系统会发出通知提醒观察了自己的配送员。</p><p>　　&amp;emsp;<strong>程序设计</strong>：在Supermarket中有Attach()和Detach()两个函数与list&lt;DeliveryObserver*&gt;accs即 DeliveryObserver的一个列表，Attach()来增加配送员Observer为观察者，Detach()删除观察者Observer，然后在消费者进行购物后，通过调用notify（）函数来进行通知，且Observer中具体的notify（）函数与策略模式相结合，对于list中的单数采用MessageStrategy1通知，list采用MessageStrategy2来通知。<br><img data-src="https://img-blog.csdnimg.cn/f9a8ff7ec1c6479bac3c6e234303f760.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/4bb27ae8ffa04ca8b886d4d26e4016f7.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/0ae1595ef22f42f793c7e005c1b9d2dc.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/21b333daa46e4dbe83b4561b37251adc.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/1ec75e41fd7a41569f9929d306e70107.png" alt="在这里插入图片描述"></p><h2 id="•4-单例模式"><a href="#•4-单例模式" class="headerlink" title="•4.单例模式"></a><strong>•4.单例模式</strong></h2><p>　　&amp;emsp;单例类只有一个实例对象，且该单例对象必须由单例类自行创建，单例类对外提供一个访问该单例的全局访问点。<br>•<img data-src="https://img-blog.csdnimg.cn/513081c9bb1547d3a30cc69ac1c9de5d.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>设计思路</strong>：在本系统中，单例类为商家类，只允许创建一个商家类，且该商家类是建造者模式的指挥者，指挥套餐的建立。</p><p>　　&amp;emsp;<strong>程序设计</strong>：在Supermarket里面，有私有静态的Supermarket类属性_instance，然后将构造函数定义为保护函数防止外界调用，在调用构造函数时判断_instance是否为空，若为空则可初始化，否则返回_instance。<br><img data-src="https://img-blog.csdnimg.cn/7d2d5f1b06af45a194a8f1ac53adef07.png" alt="在这里插入图片描述"></p><h2 id="•5-策略模式"><a href="#•5-策略模式" class="headerlink" title="•5.策略模式"></a><strong>•5.策略模式</strong></h2><p>　　&amp;emsp;该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式的主要目的是将算法的定义与使用分开，将算法的定义放在专门的策略类中，每一个策略类封装了一种实现算法，在出现新的算法时，只需要增加一个新的实现了抽象策略类的具体策略类即可。<br><img data-src="https://img-blog.csdnimg.cn/527f6cbe963b46f18d3cc2c57e6ff0d0.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>设计思路</strong>：本系统中，策略模式在观察者模式的基础上使用，在观察者模式通知Observer时，通知方式可选择不同的策略，如短信通知或软件信息通知等，在本系统中选择弹窗通知MessageStrategy1与直接输出通知MessageStrategy2来模拟这两种不同的通知方式。</p><p>　　&amp;emsp;此外，策略模式与状态模式也有在一起联合使用，若Account目前状态为GreenState或RedState，即初试化为MessageStrategy2直接在命令行窗口输出，若为VIP状态，则初试化为MessageStrategy1，产生MessageBox弹窗通知。<br><img data-src="https://img-blog.csdnimg.cn/28ba57e3df484487802f18c70e2daa7d.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>程序设计</strong>：MessageStrategy有两个子类，分别为MessageStrategy1与MessageStrategy2，MessageStrategy1即采用MessageBox进行弹窗输出，而MessageStrategy2即为cout直接输出，使用时可具体不同的策略类来实现不同的通知方式</p><p><img data-src="https://img-blog.csdnimg.cn/51a47eba58af413c8b58b36b9b428ba5.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/ad34e75290bd4868bbc68dc3a6f238dc.png" alt="在这里插入图片描述"></p><h2 id="•6-备忘录模式"><a href="#•6-备忘录模式" class="headerlink" title="•6.备忘录模式"></a><strong>•6.备忘录模式</strong></h2><p>　　&amp;emsp;在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态。这样以后就可以将对象恢复到原先保存的状态。</p><p><img data-src="https://img-blog.csdnimg.cn/8e18d18db0d744a180e21fcf5cc097e5.png" alt="在这里插入图片描述"></p><p>　　&amp;emsp;<strong>设计思路</strong>：在本系统中，备忘录模式记录在系统中的余额变动，并可查看所有的历史变动记录，并可以撤销上一次余额变动的操作，在现实中大部分购物应用都可以查看历史记录与撤销，因此利用备忘录模式实现该操作，便于观察余额变化。</p><p>　　&amp;emsp;<strong>程序设计</strong>：首先通过UserInfoDTO来在主函数中将每次余额改变时的balance即state记入Memento，然后利用Caretaker中的mementoList来记录每次余额改变后的Memento值。在查看历史记录时，即调用UserInfoDTO的getStateFromMemento()函数来遍历mementoList所有记录的历史余额；在想要进行撤销操作时，即首先调用user.getStateFromMemento（）获取最近一次操作后的余额值，之后调用p-&gt;setbalance(user.getState())将余额记录到Account账户中，且对于第一次操作与第0次操作有不同的撤销行为。<br><img data-src="https://img-blog.csdnimg.cn/48e55a9cdaa544289983980de04c5002.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/9039bf56cf2744739f2bf992cc152bb9.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/f9b1baa6ea3040f897926adb72b90ce0.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/bccef95d0a2841c089aa32e9f61f34f5.png" alt="在这里插入图片描述"></p><h2 id="三、系统运行截图"><a href="#三、系统运行截图" class="headerlink" title="三、系统运行截图"></a>三、系统运行截图</h2><p>　　<img data-src="https://img-blog.csdnimg.cn/d4eba3ae8fca4f298445862e4882315c.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/c889e815a1dd4c66a079f7958c216bff.png" alt="在这里插入图片描述"></p><p>　　<img data-src="https://img-blog.csdnimg.cn/5496faa0836147c38000b08043628143.png" alt="在这里插入图片描述"></p><p>　　<img data-src="https://img-blog.csdnimg.cn/b7517714ff2c4e2a9f148218038ac69a.png" alt="在这里插入图片描述"><br>　　<img data-src="https://img-blog.csdnimg.cn/b38a9f2f2c4c418895c53553a3df016f.png" alt="在这里插入图片描述"><br>　　<img data-src="https://img-blog.csdnimg.cn/cfcc808f89b54ff28dd09d6a0af33c28.png" alt="在这里插入图片描述"><br>　　<img data-src="https://img-blog.csdnimg.cn/037e3bb584024e37b74506c71b70e488.png" alt="在这里插入图片描述"><br>　<img data-src="https://img-blog.csdnimg.cn/6f25eed893244f32a40acc48afed3125.png" alt="在这里插入图片描述"><br>　　&amp;emsp;<img data-src="https://img-blog.csdnimg.cn/5c26d58236b94c548db57532dfe2e4dc.png" alt="在这里插入图片描述"><br>　　<img data-src="https://img-blog.csdnimg.cn/7e73595441a64362a10661e0fee5e3ca.png" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/30d1a910fe4c4d13b779cafbcf78f63a.png" alt="在这里插入图片描述"></p><h2 id="四、设计模式总结"><a href="#四、设计模式总结" class="headerlink" title="四、设计模式总结"></a>四、设计模式总结</h2><p>  　　&amp;emsp; 本次实践作业我使用了一些比较常见的设计模式，包括状态模式，单例模式，建造者模式，观察者模式，策略模式，备忘录模式。我个人认为在设计模式的使用有两个亮点。<br>  　&amp;ensp;第一个亮点就是策略模式与观察者模式与状态模式联合使用，而不是将策略模式进行单一的使用。这个想法是我在进行观察者模式设计时，发现观察者模式的通知功能可以有不同的策略实现后做出的模式设计。我将策略模式与观察者模式与状态模式联合使用，对于不同的观察者，不同的状态时会有不同的行为，因此我将策略模式融合到这两种模式中，这也是对于设计模式的一种深入使用，而不仅仅是生硬的套用。在本次实践中，。<br>　&amp;ensp; 第二个亮点是备忘录模式的使用，我个人认为备忘录模式的理解和代码设计都有一定的难度，在实践过程中也确实遇到了一些困难如Caretaker和Memento的区别，以及如何存和取历史数据，但经过认真学习进行了解决。<br>　&amp;ensp; 通过使用这些设计模式，代码对修改有了封闭性，在客户端没有具体实现，难以修改，而在进行扩展时更加容易，如对于策略模式，如果想要添加一个新的策略实现不同的通知方式，只需要增加一个策略实现的子类MessageStrategy3即可实现策略添加。</p><h2 id="五、个人的模式学习心得"><a href="#五、个人的模式学习心得" class="headerlink" title="五、个人的模式学习心得"></a>五、个人的模式学习心得</h2><p>　&amp;emsp;在本次面向对象与系统建模的课程学习中，我个人认为收获良多，与本科学习过的设计模式相比学到了更多与更加深入，首先是因为研一与本科学习时相比自己做过的项目与见过的代码更多，更加理解了为什么要运用设计模式来进行代码封装与复用，如何使用设计模式来更好的扩展代码，为什么设计代码时要满足开闭原则等多项原则。（而不像是本科学习时觉得进行这些设计模式的使用没有用处，反而让人看不懂代码具体逻辑）。<br>&amp;emsp;此外，也正是提前了解到了设计模式的重要性，我学习的兴趣也更加浓厚，因此我除了在上课时的学习，还购买了《大话设计模式》进行课外学习，同时参加了软件设计师的考试，于是我对设计模式的复用性有了更深入的了解，对于重要的模式如观察者模式、状态模式、工厂模式，适配器模式等理论方面有了更加深入的理解，对于每种设计模式的UML类图也更加理解，对于该在哪种应用场景来使用某种设计模式、如何用代码实现这些模式也更加明确，对一些不太常见的模式如原型模式，访问者模式也了解更多，更加理解了设计模式对于修改封闭，扩展开放的好处，对于迪米特法则、单一职责原则等更加理解。</p><h2 id="六、意见和建议"><a href="#六、意见和建议" class="headerlink" title="六、意见和建议"></a>六、意见和建议</h2><p>　&amp;emsp;个人认为对于设计模式的学习不能追求通过上课来速成，要在自己进行代码编写的过程中以及后续代码修改过程中才能深入理解设计模式的重要性。<br>&amp;emsp;因此对于学习过程中建议可以不用课本，直接用能够运行的使用了2-3个设计模式的简单项目，并编写2个不同的代码，一个没有使用设计模式的代码，一个使用了设计模式代码，首先演示让同学们了解代码的作用，然后平时作业可以让同学们分别对两种代码进行扩展，如对于状态模式，可以让学生对两种代码都加一种状态，这样可能比对着书本更容易理解设计模式的作用，而在期末作业上也可以要求同学们对于上课时的简单项目进行扩展，如多加几个设计模式。</p><h2 id="七、main函数与抽象类代码"><a href="#七、main函数与抽象类代码" class="headerlink" title="七、main函数与抽象类代码"></a>七、main函数与抽象类代码</h2><p>　&amp;emsp;Main函数：可以看到在Main函数与抽象类中没有看到具体的实现代码，仅仅只有函数的调用，因此基本满足开闭原则，扩展性良好，想要扩展时仅仅只需要增加子类。<br><img data-src="https://img-blog.csdnimg.cn/d34b4e06cb0446d5857abc91aac6d1f1.png" alt="在这里插入图片描述"></p><h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><p><a href="https://github.com/Pistachiout/DesignPattern/tree/master">https://github.com/Pistachiout/DesignPattern/tree/master</a></p><p>.</p>]]></content>
    
    
    <summary type="html">利用状态模式、建筑者模式、观察者模式、单例模式、策略模式、备忘录模式实现一个线上购物系统</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="C++" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
    <category term="课程实验" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="设计模式" scheme="https://pistachiout.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++重载实现m_n_k三维复数元素矩阵</title>
    <link href="https://pistachiout.github.io/wiki/C++%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0m_n_k%E4%B8%89%E7%BB%B4%E7%9F%A9%E9%98%B5%EF%BC%8C%E4%B8%94%E7%9F%A9%E9%98%B5%E5%85%83%E7%B4%A0%E4%B8%BA%E5%A4%8D%E6%95%B0/"/>
    <id>https://pistachiout.github.io/wiki/C++%E9%87%8D%E8%BD%BD%E5%AE%9E%E7%8E%B0m_n_k%E4%B8%89%E7%BB%B4%E7%9F%A9%E9%98%B5%EF%BC%8C%E4%B8%94%E7%9F%A9%E9%98%B5%E5%85%83%E7%B4%A0%E4%B8%BA%E5%A4%8D%E6%95%B0/</id>
    <published>2023-02-16T10:54:55.650Z</published>
    <updated>2023-02-23T09:07:09.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-实验要求"><a href="#1-实验要求" class="headerlink" title="1.实验要求"></a>1.实验要求</h1><pre><code>1. 设计实现三维（3D）矩阵A[i][j] [k]，支持矩阵运算符+，[]，=等运算符重载，并完成结果展示2. 矩阵中元素为复数类型</code></pre><h1 id="2-代码展示"><a href="#2-代码展示" class="headerlink" title="2.代码展示"></a>2.代码展示</h1><h2 id="1-complex类"><a href="#1-complex类" class="headerlink" title="1.complex类"></a>1.complex类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="built_in">Complex</span>()  </span><br><span class="line">    &#123;  </span><br><span class="line">        real=<span class="number">0</span>;  </span><br><span class="line">        imag=<span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">Complex</span>(<span class="type">double</span> r,<span class="type">double</span> i)  </span><br><span class="line">    &#123;  </span><br><span class="line">        real=r;  </span><br><span class="line">        imag=i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+(Complex &amp;c1, Complex &amp;c2)</span><br><span class="line">    &#123;  </span><br><span class="line">    Complex c;  </span><br><span class="line">    c.real=c1.real+c2.real;  </span><br><span class="line">    c.imag=c1.imag+c2.imag;  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;  </span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>-(Complex &amp;c1, Complex &amp;c2)</span><br><span class="line">&#123;  </span><br><span class="line">    Complex c;  </span><br><span class="line">    c.real=c1.real-c2.real;  </span><br><span class="line">    c.imag=c1.imag-c2.imag;  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Complex &amp;Complex::operator=(const Complex &amp;c1)</span></span><br><span class="line"><span class="comment">&#123;  </span></span><br><span class="line"><span class="comment">    Complex* c;  </span></span><br><span class="line"><span class="comment">    c-&gt;real=c1.real;  </span></span><br><span class="line"><span class="comment">    c-&gt;imag=c1.imag;  </span></span><br><span class="line"><span class="comment">    return c;  </span></span><br><span class="line"><span class="comment">&#125;    */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;real&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;imag&lt;&lt;<span class="string">&quot;i)&quot;</span>;  </span><br><span class="line">&#125;   </span><br><span class="line">    <span class="type">double</span> real;  </span><br><span class="line">    <span class="type">double</span> imag;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="2-二维矩阵Martix-22类，矩阵元素为Complex类型"><a href="#2-二维矩阵Martix-22类，矩阵元素为Complex类型" class="headerlink" title="2.二维矩阵Martix_22类，矩阵元素为Complex类型"></a>2.二维矩阵Martix_22类，矩阵元素为Complex类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span><span class="comment">// 用于退出程序</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Complex.cpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span><span class="comment">// 设立一个矩阵类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> row,col;</span><br><span class="line">Complex *p;<span class="comment">// 用来储存矩阵元素</span></span><br><span class="line"><span class="built_in">Matrix</span>();</span><br><span class="line"><span class="built_in">Matrix</span>(<span class="type">int</span> r,<span class="type">int</span> c);</span><br><span class="line"><span class="built_in">Matrix</span>(<span class="type">const</span> Matrix &amp;m);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span>;<span class="comment">//展示矩阵</span></span><br><span class="line"><span class="keyword">friend</span> Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;am,<span class="type">const</span> Matrix &amp;bm);<span class="comment">// 加法运算符的重载</span></span><br><span class="line">Matrix &amp; <span class="keyword">operator</span> = (<span class="type">const</span> Matrix &amp;a);<span class="comment">// “=”运算符的重载</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Martix_22.h&quot;</span></span></span><br><span class="line">Matrix::<span class="built_in">Matrix</span>()</span><br><span class="line">&#123;</span><br><span class="line">row=<span class="number">1</span>;</span><br><span class="line">col=<span class="number">2</span>;</span><br><span class="line">p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">&#125;</span><br><span class="line">Matrix::<span class="built_in">Matrix</span>(<span class="type">int</span> r,<span class="type">int</span> c):<span class="built_in">row</span>(r),<span class="built_in">col</span>(c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=r*c;</span><br><span class="line"><span class="keyword">this</span>-&gt;row=r;</span><br><span class="line"><span class="keyword">this</span>-&gt;col=c;</span><br><span class="line">p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">0</span>;a&lt;i;a++)</span><br><span class="line">&#123;p[a]=*<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;a+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个元素实部：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;p[a].real;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;a+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个元素虚部：&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;p[a].imag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Matrix::<span class="built_in">Matrix</span>(<span class="type">const</span> Matrix &amp;m)<span class="comment">// 当加法运算符重载函数被调用时，会调用复制构造函数，由于数据成</span></span><br><span class="line">&#123;                              <span class="comment">// 员有指针，因此为了防止析构函数调用时发生错误，设立一个复制构 </span></span><br><span class="line">                               <span class="comment">//   造函数</span></span><br><span class="line">row=m.row;</span><br><span class="line">col=m.col;</span><br><span class="line"><span class="type">int</span> len=col*row;</span><br><span class="line">p=<span class="keyword">new</span> Complex[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=m.p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Matrix::disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++)</span><br><span class="line">p[i*col+j].<span class="built_in">display</span>();</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Matrix <span class="keyword">operator</span> + (<span class="type">const</span> Matrix &amp;am,<span class="type">const</span> Matrix &amp;bm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(am.row==bm.row&amp;&amp;am.col==bm.col)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="function">Matrix <span class="title">temp</span><span class="params">(am)</span></span>;</span><br><span class="line">i=am.row*am.col;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line">temp.p[j]=am.p[j]+bm.p[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;cout&lt;&lt;<span class="string">&quot;++++program terminated!&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Matrix &amp; Matrix::<span class="keyword">operator</span> = (<span class="type">const</span> Matrix &amp;bm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((row==<span class="number">0</span>)&amp;&amp;(col==<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p)</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">row=bm.row;</span><br><span class="line">col=bm.col;</span><br><span class="line"><span class="type">int</span> len=bm.row*bm.col;</span><br><span class="line">p=<span class="keyword">new</span> Complex[len];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i]=bm.p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((row==bm.row)&amp;&amp;(col==bm.col))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row*col;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p[i]=bm.p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((row!=bm.row)||(col!=bm.col))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row*col;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p[i]=bm.p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-三维矩阵类，包含二维矩阵的数组"><a href="#3-三维矩阵类，包含二维矩阵的数组" class="headerlink" title="3.三维矩阵类，包含二维矩阵的数组"></a>3.三维矩阵类，包含二维矩阵的数组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span><span class="comment">// 用于退出程序</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Martix_22.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix_33</span><span class="comment">// 设立一个矩阵类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Matrix *res;</span><br><span class="line"><span class="type">int</span> h,row,col;</span><br><span class="line"><span class="built_in">Matrix_33</span>();</span><br><span class="line"><span class="built_in">Matrix_33</span>(<span class="type">int</span> r,<span class="type">int</span> c,<span class="type">int</span> h);</span><br><span class="line"><span class="built_in">Matrix_33</span>(<span class="type">const</span> Matrix_33 &amp;m);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">disp</span><span class="params">()</span></span>;<span class="comment">//展示矩阵</span></span><br><span class="line"><span class="keyword">friend</span>   Matrix_33 <span class="keyword">operator</span> + (<span class="type">const</span> Matrix_33 &amp;am,<span class="type">const</span> Matrix_33 &amp;bm);<span class="comment">// 加法运算符的重载</span></span><br><span class="line">Matrix_33 &amp; <span class="keyword">operator</span> = (<span class="type">const</span> Matrix_33 &amp;a);<span class="comment">// “=”运算符的重载</span></span><br><span class="line">Matrix &amp; <span class="keyword">operator</span> [] (<span class="type">int</span> i);<span class="comment">// []运算符的重载</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Martix_33.h&quot;</span></span></span><br><span class="line">Matrix_33::<span class="built_in">Matrix_33</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;h=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;row=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;col=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;res=<span class="keyword">new</span> <span class="built_in">Matrix</span>();</span><br><span class="line">&#125;</span><br><span class="line">Matrix_33::<span class="built_in">Matrix_33</span>(<span class="type">int</span> r,<span class="type">int</span> c,<span class="type">int</span> h)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;h=h;</span><br><span class="line"><span class="keyword">this</span>-&gt;row=r;</span><br><span class="line"><span class="keyword">this</span>-&gt;col=c;</span><br><span class="line">res=<span class="keyword">new</span> <span class="built_in">Matrix</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;h;j++)</span><br><span class="line">&#123;cout&lt;&lt;<span class="string">&quot;请输入第&quot;</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个二维矩阵：&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">res[j].row=r;</span><br><span class="line">res[j].col=c;</span><br><span class="line">res[j].p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">res[j]=*<span class="keyword">new</span> <span class="built_in">Matrix</span>();</span><br><span class="line">res[j].row=r;</span><br><span class="line">res[j].col=c;</span><br><span class="line">res[j]=*<span class="keyword">new</span> <span class="built_in">Matrix</span>(r,c);</span><br><span class="line"><span class="comment">/*res[j].row=r;</span></span><br><span class="line"><span class="comment">res[j].col=c;</span></span><br><span class="line"><span class="comment">int i=r*c;</span></span><br><span class="line"><span class="comment">res[j].p=new Complex();</span></span><br><span class="line"><span class="comment">for(int a=0;a&lt;i;a++)</span></span><br><span class="line"><span class="comment">&#123;cout&lt;&lt;&quot;请输入第&quot;&lt;&lt;a+1&lt;&lt;&quot;个元素实部：&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment"> cin&gt;&gt;res[j].p[a].real;</span></span><br><span class="line"><span class="comment"> cout&lt;&lt;&quot;请输入第&quot;&lt;&lt;a+1&lt;&lt;&quot;个元素虚部：&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment"> cin&gt;&gt;res[j].p[a].imag;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">res[j].<span class="built_in">disp</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix_33::<span class="built_in">Matrix_33</span>(<span class="type">const</span> Matrix_33 &amp;m_33)<span class="comment">// 当加法运算符重载函数被调用时，会调用复制构造函数，由于数据成</span></span><br><span class="line">&#123;                              <span class="comment">// 员有指针，因此为了防止析构函数调用时发生错误，设立一个复制构造函数</span></span><br><span class="line">h=m_33.h;</span><br><span class="line">row=m_33.row;</span><br><span class="line">col=m_33.col;</span><br><span class="line">res=m_33.res;</span><br><span class="line"><span class="keyword">if</span>(!res)<span class="comment">// 当指针未被赋值时，指针被赋予随机数，或当指针被赋值后，通过此语句指针也可以被删除调 </span></span><br><span class="line">        <span class="keyword">delete</span> res;<span class="comment">// 空间,从而去使用新的空间</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;h;j++)</span><br><span class="line">&#123;</span><br><span class="line">res[j].row=row;</span><br><span class="line">res[j].col=col;</span><br><span class="line">res[j].p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">res[j]=m_33.res[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Matrix_33::disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;h;j++)</span><br><span class="line">&#123;cout&lt;&lt;<span class="string">&quot;该三维矩阵的第&quot;</span>&lt;&lt;j+<span class="number">1</span>&lt;&lt;<span class="string">&quot;个&quot;</span>&lt;&lt;row&lt;&lt;<span class="string">&#x27;*&#x27;</span>&lt;&lt;col&lt;&lt;<span class="string">&quot;阶二维矩阵:&quot;</span> &lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;col;c++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">res[j].p[i*col+c].<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Matrix_33</span><br><span class="line"> <span class="keyword">operator</span> + (<span class="type">const</span> Matrix_33 &amp;am,<span class="type">const</span> Matrix_33 &amp;bm)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(am.h==bm.h)</span><br><span class="line">&#123;</span><br><span class="line">Matrix_33 temp;</span><br><span class="line">temp.h=am.h;</span><br><span class="line">temp.row=am.row;</span><br><span class="line">temp.col=am.col;</span><br><span class="line">temp.res=<span class="keyword">new</span> <span class="built_in">Matrix</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;am.h;j++)</span><br><span class="line">&#123;temp.res[j].row=am.res[<span class="number">0</span>].row;</span><br><span class="line">temp.res[j].col=am.res[<span class="number">0</span>].col;</span><br><span class="line">temp.res[j].p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;j&lt;&lt;<span class="string">&quot;个二维矩阵&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*temp.res[j].p-&gt;real=am.res[j].p-&gt;real+bm.res[j].p-&gt;real;</span></span><br><span class="line"><span class="comment">temp.res[j].p-&gt;imag=am.res[j].p-&gt;imag+bm.res[j].p-&gt;imag;*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;temp.row;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">0</span>;c&lt;temp.col;c++)</span><br><span class="line">&#123;temp.res[j].p[i*temp.col+c]=*<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">temp.res[j].p[i*temp.col+c]=am.res[j].p[i*temp.col+c]+bm.res[j].p[i*temp.col+c];</span><br><span class="line">temp.res[j].p[i*temp.col+c].<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix &amp; Matrix_33::<span class="keyword">operator</span> [] (<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;res[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix_33 &amp; Matrix_33::<span class="keyword">operator</span> = (<span class="type">const</span> Matrix_33 &amp;bm)</span><br><span class="line">&#123;h=bm.h;</span><br><span class="line">row=bm.row;</span><br><span class="line">col=bm.col;</span><br><span class="line"><span class="keyword">this</span>-&gt;res=<span class="keyword">new</span> <span class="built_in">Matrix</span>();</span><br><span class="line"> &#123;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;h;j++)</span><br><span class="line"> &#123;<span class="keyword">this</span>-&gt;res[j].row=bm.res[j].row;</span><br><span class="line"> <span class="keyword">this</span>-&gt;res[j].col=bm.res[j].col;</span><br><span class="line"> <span class="keyword">this</span>-&gt;res[j].p=<span class="keyword">new</span> <span class="built_in">Complex</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row*col;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;res[j].p-&gt;real=bm.res[j].p-&gt;real;</span><br><span class="line"><span class="keyword">this</span>-&gt;res[j].p-&gt;imag=bm.res[j].p-&gt;imag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-main函数"><a href="#4-main函数" class="headerlink" title="4.main函数"></a>4.main函数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Martix_33.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> h,row,col;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入三维矩阵的行数和列数和高:&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;row&gt;&gt;col&gt;&gt;h;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入三维矩阵A:&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="function">Matrix_33 <span class="title">am</span><span class="params">(row,col,h)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A&quot;</span>&lt;&lt;endl;</span><br><span class="line">am.<span class="built_in">disp</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入三维矩阵B:&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="function">Matrix_33 <span class="title">bm</span><span class="params">(row,col,h)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;B:&quot;</span>&lt;&lt;endl;</span><br><span class="line">bm.<span class="built_in">disp</span>();</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">Matrix_33 cm;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;C=A+B:&quot;</span>&lt;&lt;endl;</span><br><span class="line">cm=am+bm;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入i显示B[i]，即第i个二维矩阵:&quot;</span>&lt;&lt;endl;</span><br><span class="line">cin&gt;&gt;i;</span><br><span class="line">bm[i].<span class="built_in">disp</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="3-实验截图"><a href="#3-实验截图" class="headerlink" title="3.实验截图"></a>3.实验截图</h1><p>初始化A，B矩阵，可自由设定三维矩阵的行，列，高，以及对应元素的虚部实部<br><img data-src="https://img-blog.csdnimg.cn/d51732e1b3e64a94ba5a31fb636563db.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/06b80f9b57a14650a50b6bc44cc57f80.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/59fb9e1ff8264839a26c9720185138e0.png" alt="在这里插入图片描述"><br>重载+，[]，&#x3D;运算符，输出3D矩阵C&#x3D;A+B以及B[i]<br><img data-src="https://img-blog.csdnimg.cn/91c127e3585d4cc7a2243513862542c6.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">设计实现三维（3D）矩阵A[i][j] [k]，矩阵中元素为复数类型，支持矩阵运算符+，[]，=等运算符重载，并完成结果展示</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="C++" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
    <category term="课程实验" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>STM32芯片+步进电机档位控制实验</title>
    <link href="https://pistachiout.github.io/wiki/%E8%8A%AF%E7%89%87+%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E6%A1%A3%E4%BD%8D%E6%8E%A7%E5%88%B6%E5%AE%9E%E9%AA%8C/"/>
    <id>https://pistachiout.github.io/wiki/%E8%8A%AF%E7%89%87+%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E6%A1%A3%E4%BD%8D%E6%8E%A7%E5%88%B6%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-02-16T10:54:55.626Z</published>
    <updated>2023-02-23T09:07:33.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、系统功能"><a href="#1、系统功能" class="headerlink" title="1、系统功能"></a>1、系统功能</h1><p>目的：学习步进电机的控制。<br>使用设备：步进电机、两位共阴数码管、按键<br>功能：驱动步进电机以不同转速（4档）转动，并将当前档位用数码管显示<br>(1)按键 KEY1 作为启动和停止的切换按键；<br>(2)按键 KEY2 加速键。<br>(3)最开始按下 KEY1 ，系统以默认的最低档位（1档最低，4档最高）启动电机转动；<br>(4)每按一次 KEY2 ，电机转速提升一档。提到最高4档后，自动降到最低的1档。<br>(5)数码管显示当前的档位。<br>(6)电机处于停止状态时，数码管显示0。</p><h1 id="2、硬件结构"><a href="#2、硬件结构" class="headerlink" title="2、硬件结构"></a>2、硬件结构</h1><p>本课程实验主控芯片选择的是STM32F103ZET6作为MCU，该芯片是STM32F103里面配置非常强大的了,它拥有的资源包括：64KB SRAM、 512KB FLASH、2个基本定时器、4个通用定时器、2个高级定时器、2个DMA控制器（共12个通道）、3个SPI、2个IIC、5个串口、1个USB、1个CAN、3个12位ADC、1个12位DAC、1个SDIO接口、1个FSMC接口以及112个通用IO口。该芯片的配置十分强悍，并且还带外部总线（FSMC）可以用来外扩SRAM和连接LCD等，通过FSMC（可变静态存储控制器）驱动LCD，可以显著提高LCD的刷屏速度。<br><img data-src="https://img-blog.csdnimg.cn/d1bad71745c549e0a6edfd12360ffc92.png" alt="在这里插入图片描述"></p><h1 id="3、主要外设"><a href="#3、主要外设" class="headerlink" title="3、主要外设"></a>3、主要外设</h1><p>本项目用到的主要外设为步进电机与两位共阴数码管，其中步进电机由ULN2003芯片控制。ULN2003是高耐压、大电流达林顿阵列，由七个硅NPN达林顿管组成。ULN2003的每一对达林顿都串联一个2.7K的基极电阻,在5V的工作电压下它能与TTL和CMOS电路直接相连，可以直接处理原先需要标准逻辑缓冲器来处理的数据。ULN2003工作电压高，工作电流大，灌电流可达500mA，并且能够在关态时承受50V的电压，输出还可以在高负载电流并行运行。<br>步进电机的驱动采用1-2相励磁法：1相和2相轮流交替导通，精度较高，且运转平滑。每送一个励磁信转动二分之一标称角度。有称为半步驱动。4相电机中，1、2种方式称4相4拍，3种称4相8拍。1-2相励磁法如下图所示，即采用A-&gt;AB-&gt;B-&gt;BC-&gt;C-&gt;CD-&gt;D-&gt;DA的方式陆续为线圈通电。<br><img data-src="https://img-blog.csdnimg.cn/7595366aae2f458eb1c52e6da4256f50.png" alt="在这里插入图片描述"></p><p>共阴数码管是指八段数码管的八段发光二极管的阴极（负极）都连在一起，而阳极对应的各段分别控制。</p><h1 id="4、设计思路"><a href="#4、设计思路" class="headerlink" title="4、设计思路"></a>4、设计思路</h1><h2 id="4-1硬件设计原理"><a href="#4-1硬件设计原理" class="headerlink" title="4.1硬件设计原理"></a>4.1硬件设计原理</h2><p>IN1(连接在PF0),IN2(连接在PF1),IN3(连接在PF2),IN4(连接在PF3)驱动板电源负极连接开发板GND，正极连接开发板5v。连接如下图所示（连线紧密，请根据杜邦线颜色来判断）<br><img data-src="https://img-blog.csdnimg.cn/529a43d0474b401a86c1517e1bffc34e.png" alt="在这里插入图片描述"></p><p>数码管的连接如下图所示。1接PD3，2接PC8,3接PG13,4接PG7,5接PG11,6接PD6,7接PA8,8接PC7,9接PC6,10接PC9。<br><img data-src="https://img-blog.csdnimg.cn/8b38ce30765a4a60be2dfb20533d34b8.png" alt="在这里插入图片描述"></p><p>模块本身的连接方式如下图所示。<br><img data-src="https://img-blog.csdnimg.cn/e6f674a30fdd4595a9a95daee26c84ae.png" alt="在这里插入图片描述"></p><h2 id="4-2软件设计流程"><a href="#4-2软件设计流程" class="headerlink" title="4.2软件设计流程"></a>4.2软件设计流程</h2><p><a href="https://download.csdn.net/download/qq_45808700/87369062">实验代码</a><br>   首先步进电机的工作原理实际上是电磁铁的作用原理。是将电脉冲信号转变为角位移或线位移的开环控制步进电机元件，通过控制施加在电机线圈上的电脉冲顺序、频率和数量，可以实现对步进电机的转向、速度和旋转角度的控制，配合以直线运动执行机构或齿轮箱装置，更可以实现更加复杂、精密的线性运动控制要求。</p><p>共阴数码管是指将所有发光二极管的阴极接到一起形成公共阴极的数码管，共阴数码管在应用时应将公共极COM接到地线GND上，当某一字段发光二极管的阳极为高电平时，相应字段就点亮，当某一字段的阳极为低电平时，相应字段就不亮。</p><p>在整体流程上，通过芯片上的按键控制步进电机的转速与数码管的显示，按键 KEY1 作为启动和停止的切换按键，按键 KEY2 用来增大步进电机工作档位，故在软件设计时，首先要根据这些硬件设施设置对应的模块，包括对应的按键模块key.h与key.c用来读取是否进行按键操作，还有数码管对应的模块led.h与led.c来处理按键后的数码管，与最后的步进电机的模块motor.h与motor.c来处理步进电机的转动速度。</p><p>在key模块中，主要靠KEY_Init()与KEY_Scan（）函数实现控制， 其中KEY_Scan（）用来进行按键处理，若检测到按键KEY1或KEY2，则赋值KEY0_PRES与KEY1_PRES。<br><img data-src="https://img-blog.csdnimg.cn/4ddc33363754407d935f9b2abba4a497.png" alt="在这里插入图片描述"></p><p>在led模块中，使用LED_Init函数，通过GPIO_Initure()与HAL_GPIO_WritePin()对控制数码管各部分亮灭的每个引脚进行初始化。<br><img data-src="https://img-blog.csdnimg.cn/6c33f079e3c5423893a463e80a5885f0.png" alt="在这里插入图片描述"></p><p>在motor.c模块中，通过Motor_Init（）函数对控制A、B、C、D四个线圈的PF0、PF1、PF2、PF3进行初始化。<br><img data-src="https://img-blog.csdnimg.cn/2da90b2ce9db4cda91fe5c6ef731732c.png" alt="在这里插入图片描述"></p><p>在main.c模块中，采用1-2相励磁法驱动步进电机，1相和2相交替导通。在本系统中分别由PF0、PF1、PF2和PF3分别来控制线圈A、B、C、D的通电，因此采用如下方法通过对四个引脚的状态的控制，分别按A→AB→B→BC→C→CD→D→DA的顺序对线圈进行充放电从而产生电流驱动步进电机。通过HAL_Delay（）进行对电机转机转速的控制，针对不同档位采用大小不同的参数speed，档位越低speed值越大，从而在每一轮次对线圈进行充放电的过程中延迟更长的时间。通过open和level两个参数来控制步进电机的是否工作与其工作档位。当按下KEY1键时，KEY0_PRES响应，此时先判断open的值，若open为1则置0；若open为0则置1且level默认为1。当按下KEY2键时，KEY1_PRES响应，此时先判断level的值，再使其加一，当level为4时将其置为1，再通过HAL_GPIO_WritePin()函数控制引脚从而控制数码管各部分的亮灭，使得数码管能够显示对应档位的数字。<br><img data-src="https://img-blog.csdnimg.cn/956e53672e5c4cd5b4aa54bc69291e5b.png" alt="在这里插入图片描述"></p><h1 id="5、软件开发环境"><a href="#5、软件开发环境" class="headerlink" title="5、软件开发环境"></a>5、软件开发环境</h1><h2 id="5-1软件开发环境安装和配置"><a href="#5-1软件开发环境安装和配置" class="headerlink" title="5.1软件开发环境安装和配置"></a>5.1软件开发环境安装和配置</h2><p>开发工具为RT-Thread Studio。<br>访问官网<a href="https://www.rt-thread.org/page/studio.html%EF%BC%8C%E5%9C%A8%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%9A%84">https://www.rt-thread.org/page/studio.html，在官网下载最新的</a> RT-Thread Studio 软件安装包。<br>使用MCUISP工具配合开发板上的下载电路可实现串口下载，此外还需下载CH340驱动。<br>5.2工程文件的目录结构和文件<br>本工程文件共分为4个模块，包括对应的按键模块key.h与key.c用来读取是否进行按键操作，还有数码管对应的模块led.h与led.c来处理按键后的数码管，与最后的步进电机的模块motor.h与motor.c来处理步进电机的转动速度，然后还有main.c文件，以进入主函数。<br><img data-src="https://img-blog.csdnimg.cn/db4602a35dcb41f5b1255b29f8ced710.png" alt="在这里插入图片描述"></p><p>首先打开RT-Thread Studio，导入我们建好的裸板模板工程 Template，之后将工程文件中的.h头文件与.cpp文件复制，粘贴到创建的工程下的applications文件夹内，点击按下图进行配置，使编译生成.hex 文件。<br><img data-src="https://img-blog.csdnimg.cn/61fd88a8310849e1962093284dfe9122.png" alt="在这里插入图片描述"></p><p>然后点击构建按钮完成编译构建，之后打开MCUISP下载到电路板上，在电路板上进行测试。<br><img data-src="https://img-blog.csdnimg.cn/38474ec425b6439998c77ce187e6d6a8.png" alt="在这里插入图片描述"></p><h2 id="6、运行和测试"><a href="#6、运行和测试" class="headerlink" title="6、运行和测试"></a>6、运行和测试</h2><p>项目总体的接线情况如下：<br><img data-src="https://img-blog.csdnimg.cn/e70cac417e2b4f13b05925dbae31d0cf.png" alt="在这里插入图片描述"></p><p>上电后，首先数码管显示为0，步进电机尚未工作。<br><img data-src="https://img-blog.csdnimg.cn/a250b29ac42b44f89f3df68d0ae7c1e0.png" alt="在这里插入图片描述"></p><p>首先按下KEY1按键，此时系统以默认的最低档位1档开始工作，数码管数字显示为1，步进电机开始工作，旋转速度为1档，较慢。<br><img data-src="https://img-blog.csdnimg.cn/20719aa199884ef2980e92688af12170.png" alt="在这里插入图片描述"></p><p>再按下KEY2按键，此时数码管数字显示为2，步进电机旋转速度提升至2档。<br><img data-src="https://img-blog.csdnimg.cn/db5e0b50c67d4000a806e80ad1aa5f8e.png" alt="在这里插入图片描述"></p><p>此时，连续两次按下KEY2按键，此时数码管数字显示先升到3再升到4，步进电机旋转速度提升至4档，为最高档。<img data-src="https://img-blog.csdnimg.cn/c2dcf8e8328449a9bc5670ce0a9d6d4e.png" alt="在这里插入图片描述"></p><p>再次按下KEY2按键后，数码管数字显示变为1，步进电机旋转速度降至1档。<br><img data-src="https://img-blog.csdnimg.cn/c23b96f1152e4f36b534346b73998b35.png" alt="在这里插入图片描述"></p><p>最后按下KEY1按键，数码管数字显示变为0，步进电机停止工作。<br><img data-src="https://img-blog.csdnimg.cn/cf0b8785a75b4e668f52f523d82a5e92.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">使用步进电机、两位共阴数码管、按键驱动步进电机与RT-Thread Studio开发以不同转速（4档）转动，并将当前档位用数码管显示</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="C++" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="嵌入式" scheme="https://pistachiout.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java类</title>
    <link href="https://pistachiout.github.io/wiki/java%E6%A8%A1%E6%8B%9F%E5%A0%86%E6%A0%88%EF%BC%8C%E6%97%B6%E9%97%B4%E7%B1%BBMyDate%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%B1%BB%EF%BC%8C%E7%B1%BBBankCustomer/"/>
    <id>https://pistachiout.github.io/wiki/java%E6%A8%A1%E6%8B%9F%E5%A0%86%E6%A0%88%EF%BC%8C%E6%97%B6%E9%97%B4%E7%B1%BBMyDate%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9%E7%B1%BB%EF%BC%8C%E7%B1%BBBankCustomer/</id>
    <published>2023-02-16T10:54:55.498Z</published>
    <updated>2023-02-23T08:59:43.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、将你在实验3中设计的模拟堆栈程序，封装成一个类（注意访问控制的运用、getter和setter的运用、构造方法的设计等），并用这个堆栈类重写中缀表达式转换成后缀表达式程序。"><a href="#1、将你在实验3中设计的模拟堆栈程序，封装成一个类（注意访问控制的运用、getter和setter的运用、构造方法的设计等），并用这个堆栈类重写中缀表达式转换成后缀表达式程序。" class="headerlink" title="1、将你在实验3中设计的模拟堆栈程序，封装成一个类（注意访问控制的运用、getter和setter的运用、构造方法的设计等），并用这个堆栈类重写中缀表达式转换成后缀表达式程序。"></a>1、将你在实验3中设计的模拟堆栈程序，封装成一个类（注意访问控制的运用、getter和setter的运用、构造方法的设计等），并用这个堆栈类重写中缀表达式转换成后缀表达式程序。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackImiate</span> &#123; </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line"><span class="keyword">private</span> <span class="type">char</span>[] a;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> top;</span><br><span class="line">StackImiate(<span class="type">int</span> maxSize) &#123;</span><br><span class="line"><span class="built_in">this</span>.maxSize=maxSize;</span><br><span class="line">a=<span class="keyword">new</span> <span class="title class_">char</span>[maxSize];</span><br><span class="line">top=-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">char</span> str)</span> &#123;</span><br><span class="line">a[++top]=str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[top--];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(top==-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span>(top==maxSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> </span><br><span class="line">   &#123;<span class="keyword">return</span> top+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a[top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">char</span> <span class="title function_">peekN</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println(a[n]);</span></span><br><span class="line"><span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayStack</span><span class="params">(String s)</span> &#123;</span><br><span class="line">System.out.print(s);</span><br><span class="line">System.out.print(<span class="string">&quot; Stack (bottom--&gt;top): &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;maxSize;j++) &#123;</span><br><span class="line">System.out.print(peekN(j)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InToPost</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String strResult=<span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">String  Input=<span class="string">&quot;a+b*c+(d*e+f)*g&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;中缀表达式&quot;</span>+Input);</span><br><span class="line">strResult=strResult+doTrans(Input);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;后缀表达式&quot;</span>+strResult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title function_">doTrans</span><span class="params">(String  Input)</span> &#123;</span><br><span class="line">StackImiate  str=<span class="keyword">new</span> <span class="title class_">StackImiate</span>(<span class="number">50</span>);</span><br><span class="line">StringBuffer strResultTemp=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;Input.length(); i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> Input.charAt(i);</span><br><span class="line">str.displayStack(<span class="string">&quot;Get &quot;</span> + ch + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">gotOper(ch, <span class="number">1</span>,str,strResultTemp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">gotOper(ch, <span class="number">2</span>,str,strResultTemp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">str.push(ch);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">gotParen(ch,str,strResultTemp);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">strResultTemp =strResultTemp.append(ch);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!str.isEmpty()) &#123;</span><br><span class="line">str.displayStack(<span class="string">&quot;out &quot;</span>);</span><br><span class="line">strResultTemp = strResultTemp.append(str.pop());</span><br><span class="line">&#125;</span><br><span class="line">str.displayStack(<span class="string">&quot;End  &quot;</span>);</span><br><span class="line"><span class="keyword">return</span> strResultTemp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gotParen</span><span class="params">(<span class="type">char</span> ch,StackImiate  str,StringBuffer strResultTemp)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (!str.isEmpty()) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">chx</span> <span class="operator">=</span> (<span class="type">char</span>) str.pop();</span><br><span class="line"><span class="keyword">if</span> (chx == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">strResultTemp =strResultTemp.append(chx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gotOper</span><span class="params">(<span class="type">char</span> ch, <span class="type">int</span> i,StackImiate  str,StringBuffer strResultTemp)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">while</span> (!str.isEmpty()) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">opTop</span> <span class="operator">=</span> (<span class="type">char</span>) str.pop();</span><br><span class="line"><span class="keyword">if</span> (opTop == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">str.push(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">if</span> (opTop == <span class="string">&#x27;+&#x27;</span> || opTop == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k &lt; i) &#123;</span><br><span class="line">str.push(opTop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">strResultTemp = strResultTemp.append(opTop);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">str.push(ch);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601225543524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、设计一个时间类MyDate：（日期均大于1900年）"><a href="#2、设计一个时间类MyDate：（日期均大于1900年）" class="headerlink" title="2、设计一个时间类MyDate：（日期均大于1900年）"></a>2、设计一个时间类MyDate：（日期均大于1900年）</h2><p>a、其中包括年、月、日、时、分、秒。其他成员变量可根据需要增设；<br>b、可以直接获得时间的年、月、日、小时、分钟、秒数；(public修饰)<br>c、计算日期的dayOfWeek（星期几）；<br>d、输入任意一个月份，将此月的日历输出（按星期格式）；<br>e、输入任意年份，将此年的年历输出；<br>f、输出时间，要求三种格式：<br>yyyy年MM月dd日hh小时mm分ss秒；（Chinese）<br>yyyy-MM-dd hh:mm:ss（European）<br>yyyyMMddhhmmss（compact）<br>g、设计三个构造方法：<br>1、参数只有年月日的构造方法，小时分钟秒设为0；<br>2、完全参数的构造方法；<br>3、如果使用无参数的构造方法则初始化为系统时间。<br>h、不要直接使用Java提供的Date类，那样就达不到练习的效果了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyDate</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> year,month,day,hour,minute,second;</span><br><span class="line">String strDate;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyDate</span><span class="params">()</span></span><br><span class="line">&#123;<span class="type">SimpleDateFormat</span> <span class="variable">myDateFormat</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line"> java.util.Date  date0=<span class="keyword">new</span> <span class="title class_">java</span>.util.Date();</span><br><span class="line"> strDate=myDateFormat.format(date0);</span><br><span class="line"> year = Integer.parseInt( strDate.substring(<span class="number">0</span>,<span class="number">4</span>));</span><br><span class="line">month = Integer.parseInt( strDate.substring(<span class="number">4</span>,<span class="number">6</span>));</span><br><span class="line">day = Integer.parseInt( strDate.substring(<span class="number">6</span>,<span class="number">8</span>));</span><br><span class="line">hour = Integer.parseInt( strDate.substring(<span class="number">8</span>,<span class="number">10</span>));</span><br><span class="line">minute = Integer.parseInt( strDate.substring(<span class="number">10</span>,<span class="number">12</span>));</span><br><span class="line">second = Integer.parseInt( strDate.substring(<span class="number">12</span>,<span class="number">14</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year0,<span class="type">int</span> month0,<span class="type">int</span> day0)</span></span><br><span class="line">&#123;year=year0;</span><br><span class="line"> month=month0;</span><br><span class="line"> day=day0;</span><br><span class="line"> hour=<span class="number">0</span>;</span><br><span class="line"> minute=<span class="number">0</span>;</span><br><span class="line"> second=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="title function_">MyDate</span><span class="params">(<span class="type">int</span> year0,<span class="type">int</span> month0,<span class="type">int</span> day0,<span class="type">int</span> hour0,<span class="type">int</span> minite0,<span class="type">int</span> second0)</span></span><br><span class="line"> &#123;year=year0;</span><br><span class="line">  month=month0;</span><br><span class="line">  day=day0;</span><br><span class="line">  hour=hour0;</span><br><span class="line">  minute=minite0;</span><br><span class="line">  second=second0;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span></span><br><span class="line">      &#123;<span class="keyword">return</span> year;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMonth</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> month;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDate</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> day+<span class="string">&quot;/&quot;</span>+month+<span class="string">&quot;/&quot;</span>+year;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHour</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> hour;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinite</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> minute;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSecond</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> second;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayChinese</span><span class="params">()</span></span><br><span class="line">&#123;System.out.println(year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日&quot;</span>+hour+<span class="string">&quot;时&quot;</span>+minute+<span class="string">&quot;分&quot;</span>+second+<span class="string">&quot;秒&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayEU</span><span class="params">()</span></span><br><span class="line">&#123;System.out.println(year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+day+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot;:&quot;</span>+minute+<span class="string">&quot;:&quot;</span>+second+<span class="string">&quot; &quot;</span>);&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayCompact</span><span class="params">()</span></span><br><span class="line">&#123;System.out.println(year+<span class="string">&quot; &quot;</span>+month+<span class="string">&quot; &quot;</span>+day+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot; &quot;</span>+minute+<span class="string">&quot; &quot;</span>+second);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayMonth</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month)</span><span class="comment">//输出一月的日历</span></span><br><span class="line">&#123;<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1900</span>;i&lt;year;i++)</span><br><span class="line">&#123;<span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">100</span>!=<span class="number">0</span>||i%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">&#123;sum+=<span class="number">366</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;sum+=<span class="number">365</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;month;i++)</span><br><span class="line">&#123;<span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">&#123;sum+=<span class="number">29</span>;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;sum+=<span class="number">28</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">if</span>(i==<span class="number">4</span>||i==<span class="number">6</span>||i==<span class="number">9</span>||i==<span class="number">11</span>)</span><br><span class="line"> &#123;sum+=<span class="number">30</span>;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> &#123;sum+=<span class="number">31</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum+=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> wekday=sum%<span class="number">7</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;日\t一\t二\t三\t四\t五\t六&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=wekday;i++)</span><br><span class="line">&#123;System.out.print(<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(month!=<span class="number">2</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(month==<span class="number">4</span>||month==<span class="number">6</span>||month==<span class="number">9</span>||month==<span class="number">11</span>)</span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;&#125;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">31</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;&#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">29</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="keyword">if</span>(month!=<span class="number">2</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(month==<span class="number">4</span>||month==<span class="number">6</span>||month==<span class="number">9</span>||month==<span class="number">11</span>)</span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span>&#123;</span><br><span class="line"> System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;&#125;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">31</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;&#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">28</span>;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(sum%<span class="number">7</span>==<span class="number">6</span>)</span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.print(i+<span class="string">&quot;\t&quot;</span>);&#125;</span><br><span class="line"> sum++;</span><br><span class="line">&#125;&#125;&#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayYear</span><span class="params">(<span class="type">int</span> year)</span><span class="comment">//输出一年的日历</span></span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">&#123;System.out.println(<span class="string">&quot;         第&quot;</span>+i+<span class="string">&quot;月&quot;</span>);</span><br><span class="line">displayMonth(year,i);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dayOfWeek</span><span class="params">(<span class="type">int</span> year,<span class="type">int</span> month,<span class="type">int</span> day)</span><span class="comment">//判断某天为一周的星期几</span></span><br><span class="line">&#123;<span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1900</span>;i&lt;year;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;i%<span class="number">100</span>!=<span class="number">0</span>||i%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line"> &#123;sum+=<span class="number">366</span>;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;sum+=<span class="number">365</span>;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;month;i++)</span><br><span class="line"> &#123;<span class="keyword">if</span>(i==<span class="number">2</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>||year%<span class="number">400</span>==<span class="number">0</span>)</span><br><span class="line"> &#123;sum+=<span class="number">29</span>;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;sum+=<span class="number">28</span>;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;<span class="keyword">if</span>(i==<span class="number">4</span>||i==<span class="number">6</span>||i==<span class="number">9</span>||i==<span class="number">11</span>)</span><br><span class="line">&#123;sum+=<span class="number">30</span>;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;sum+=<span class="number">31</span>;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> sum+=<span class="number">1</span>;</span><br><span class="line"> <span class="type">int</span> wekFirstday=sum%<span class="number">7</span>;</span><br><span class="line"> <span class="type">int</span> dayOfWeek=wekFirstday;</span><br><span class="line"> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span>(i&lt;day)</span><br><span class="line"> &#123;i++;dayOfWeek++;&#125;</span><br><span class="line"> <span class="keyword">if</span>(dayOfWeek!=<span class="number">7</span>)</span><br><span class="line"> &#123;<span class="keyword">return</span> <span class="string">&quot;第&quot;</span>+year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日为星期&quot;</span>+dayOfWeek;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;<span class="keyword">return</span> <span class="string">&quot;第&quot;</span>+year+<span class="string">&quot;年&quot;</span>+month+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日为星期日&quot;</span>;&#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseMyDate</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">MyDate myDate=<span class="keyword">new</span> <span class="title class_">MyDate</span>();</span><br><span class="line">myDate.displayChinese();</span><br><span class="line">myDate.displayEU();</span><br><span class="line">myDate.displayCompact();</span><br><span class="line">MyDate myDate1=<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2008</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">myDate1.displayChinese();</span><br><span class="line">myDate1.displayEU();</span><br><span class="line">myDate1.displayCompact();</span><br><span class="line">MyDate myDate2=<span class="keyword">new</span> <span class="title class_">MyDate</span>(<span class="number">2008</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">20</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">myDate2.displayChinese();</span><br><span class="line">myDate2.displayEU();</span><br><span class="line">myDate2.displayCompact();</span><br><span class="line">myDate.displayMonth(<span class="number">2014</span>,<span class="number">4</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">myDate.displayYear(<span class="number">2011</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601225553136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210601225600318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3、设计一个字符串链表节点类："><a href="#3、设计一个字符串链表节点类：" class="headerlink" title="3、设计一个字符串链表节点类："></a>3、设计一个字符串链表节点类：</h2><p>a)其中包括两个成员变量：Value（String类型）和下一个节点nextNode，方法有：setValue()，getValue()和display();<br>b)用此类生成一个循环链表来解决斗地主发牌的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String Value;</span><br><span class="line"><span class="keyword">public</span> ChainNode nextNode;</span><br><span class="line"><span class="keyword">public</span> String suit;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainNode</span><span class="params">()</span></span><br><span class="line">&#123;Value=<span class="string">&quot;&quot;</span>;</span><br><span class="line"> nextNode=<span class="literal">null</span>;</span><br><span class="line"> suit=<span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainNode</span><span class="params">(String Value,ChainNode nextNode, String suit)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.Value=Value;</span><br><span class="line"><span class="built_in">this</span>.nextNode=nextNode;</span><br><span class="line"><span class="built_in">this</span>.suit=suit;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ChainNode</span><span class="params">(String Value, String suit)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.Value=Value;</span><br><span class="line"><span class="built_in">this</span>.suit=suit;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String suit,String value)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.Value=value;</span><br><span class="line"><span class="built_in">this</span>.suit=suit;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> Value;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span></span><br><span class="line">&#123;System.out.print(suit+Value+<span class="string">&quot;  &quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DealCards</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String suits[]=<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;黑桃&quot;</span>,<span class="string">&quot;梅花&quot;</span>,<span class="string">&quot;方块&quot;</span>,<span class="string">&quot;红桃&quot;</span>&#125;;</span><br><span class="line">String Value[]=<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;10&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;K&quot;</span>,&#125;;</span><br><span class="line">ChainNode[] cardsOfPlayer = <span class="keyword">new</span> <span class="title class_">ChainNode</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cardsOfPlayer[i] = <span class="keyword">new</span> <span class="title class_">ChainNode</span>();</span><br><span class="line">&#125;</span><br><span class="line">ChainNode firstCard=<span class="keyword">new</span> <span class="title class_">ChainNode</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;大王&quot;</span>);</span><br><span class="line">firstCard.nextNode=<span class="keyword">new</span> <span class="title class_">ChainNode</span>(<span class="string">&quot;&quot;</span>,<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">ChainNode lastCard=firstCard.nextNode;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">13</span>;j++)</span><br><span class="line">&#123;lastCard.nextNode= <span class="keyword">new</span> <span class="title class_">ChainNode</span>(Value[j],suits[i]);</span><br><span class="line"> lastCard=lastCard.nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lastCard.nextNode=firstCard;</span><br><span class="line"><span class="type">int</span> random=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> players=<span class="number">0</span>;</span><br><span class="line">ChainNode choose=firstCard;</span><br><span class="line">ChainNode before=lastCard;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num=<span class="number">54</span>;num&gt;<span class="number">3</span>;num--)</span><br><span class="line">&#123;random=(<span class="type">int</span>)(Math.random()*num);</span><br><span class="line"><span class="keyword">for</span>(;random&gt;<span class="number">1</span>;random--)</span><br><span class="line">&#123;before=choose;</span><br><span class="line">choose=choose.nextNode;&#125;</span><br><span class="line">before.nextNode=choose.nextNode;</span><br><span class="line">choose.nextNode=cardsOfPlayer[players].nextNode;</span><br><span class="line">cardsOfPlayer[players].nextNode=choose;</span><br><span class="line">choose=before.nextNode;</span><br><span class="line">players++;</span><br><span class="line">players=players%<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\n第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个玩家的牌是&quot;</span>);</span><br><span class="line"><span class="type">ChainNode</span> <span class="variable">pri</span> <span class="operator">=</span> cardsOfPlayer[i].nextNode;</span><br><span class="line"><span class="keyword">while</span>(pri != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">pri.display();</span><br><span class="line">pri = pri.nextNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\nThe Last Three Cards：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">choose.display();</span><br><span class="line">choose = choose.nextNode;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601225606986.png" alt="在这里插入图片描述"></p><h2 id="4、设计一个用于管理银行客户的类BankCustomer："><a href="#4、设计一个用于管理银行客户的类BankCustomer：" class="headerlink" title="4、设计一个用于管理银行客户的类BankCustomer："></a>4、设计一个用于管理银行客户的类BankCustomer：</h2><p>仅描述客户的几个重要方面：帐号、身份证号、姓名、联系方式、密码、账户余额。所有的成员变量均用private访问控制，因此每一个成员变量就要有相应的存取器（getter和setter，即获取和设置其值的相应的成员方法。需要setter还是getter，还是两者都要，视情况而定）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BankCustomer</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String ID;</span><br><span class="line"><span class="keyword">private</span> String peopleID;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BankCustomer</span><span class="params">(String peopleID,String name,String phone)</span></span><br><span class="line">&#123;String strDate;</span><br><span class="line"> <span class="type">SimpleDateFormat</span> <span class="variable">myDateFormat</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line"> java.util.Date  date0=<span class="keyword">new</span> <span class="title class_">java</span>.util.Date();</span><br><span class="line"> strDate=myDateFormat.format(date0);</span><br><span class="line"> ID=strDate;</span><br><span class="line"> <span class="built_in">this</span>.peopleID=peopleID;</span><br><span class="line"> <span class="built_in">this</span>.name=name;</span><br><span class="line"> <span class="built_in">this</span>.phone=phone;</span><br><span class="line"> <span class="built_in">this</span>.password=<span class="string">&quot;666666&quot;</span>;</span><br><span class="line"> <span class="built_in">this</span>.balance=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getbalance</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> balance;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getID</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> ID;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> phone;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPelpleID</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> peopleID;&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String password,String name)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;<span class="built_in">this</span>.name=name;</span><br><span class="line">System.out.println(<span class="string">&quot;您的姓名已设置&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPeopleID</span><span class="params">(String password,String peopleID)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;<span class="built_in">this</span>.peopleID=peopleID;</span><br><span class="line">System.out.println(<span class="string">&quot;您的身份证号已设置&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String password,String phone)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;<span class="built_in">this</span>.phone=phone;</span><br><span class="line">System.out.println(<span class="string">&quot;您的电话已设置&quot;</span>);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">ifPassword</span><span class="params">(String password)</span><span class="comment">//判断密码是否正确</span></span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="built_in">this</span>.password==password)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">deposit</span><span class="params">(String password,<span class="type">double</span> money)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;balance+=money;</span><br><span class="line"> System.out.println(<span class="string">&quot;您的账户已充值&quot;</span>+balance+<span class="string">&quot;元，您的余额为&quot;</span>+balance);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(String password,<span class="type">double</span> money)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;<span class="keyword">if</span>(balance&gt;money)</span><br><span class="line">&#123;balance-=money;</span><br><span class="line"> System.out.println(<span class="string">&quot;您的账户已取出&quot;</span>+balance+<span class="string">&quot;元，您的余额为&quot;</span>+balance);&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;System.out.println(<span class="string">&quot;您的余额为不足&quot;</span>);&#125;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayCustomer</span><span class="params">(String password)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(password))</span><br><span class="line">&#123;System.out.println(<span class="string">&quot;  您的身份证为&quot;</span>+peopleID);</span><br><span class="line">System.out.println(<span class="string">&quot;  您的余额为&quot;</span>+balance);</span><br><span class="line">System.out.println(<span class="string">&quot;  您的账号为&quot;</span>+ID);</span><br><span class="line">System.out.println(<span class="string">&quot;  您的姓名为&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;  您的电话为&quot;</span>+phone);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> &#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassWord</span><span class="params">(String oldPassword,String newPassword1,String newPassword2)</span></span><br><span class="line">&#123;<span class="keyword">if</span>(ifPassword(oldPassword))</span><br><span class="line"> &#123;<span class="keyword">if</span>( newPassword1== newPassword2)</span><br><span class="line"> &#123;<span class="keyword">if</span>(newPassword1.length()&gt;<span class="number">5</span>)</span><br><span class="line">&#123;<span class="built_in">this</span>.password=newPassword1;</span><br><span class="line"> System.out.println(<span class="string">&quot;已修改密码&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.println(<span class="string">&quot;你输入的密码不到6位，请重新输入&quot;</span>);&#125;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.println(<span class="string">&quot;你输入的两次密码不一样，请重新输入&quot;</span>);&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;System.out.println(<span class="string">&quot;密码错误&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> text4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">BankCustomer myCard=<span class="keyword">new</span> <span class="title class_">BankCustomer</span>(<span class="string">&quot;430725000000000000&quot;</span>,<span class="string">&quot;罗琪源&quot;</span>,<span class="string">&quot;000000000000&quot;</span>);</span><br><span class="line">myCard.setName(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">myCard.setName(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">myCard.setPeopleID(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;430725200112190032&quot;</span>);</span><br><span class="line">myCard.setPeopleID(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;430725200112190032&quot;</span>);</span><br><span class="line">myCard.setPhone(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;18569126258&quot;</span>);</span><br><span class="line">myCard.setPhone(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;18569126258&quot;</span>);</span><br><span class="line">myCard.getbalance();</span><br><span class="line">myCard.getID();</span><br><span class="line">myCard.getPhone();</span><br><span class="line">myCard.getPelpleID();</span><br><span class="line">myCard.getName();</span><br><span class="line">myCard.deposit(<span class="string">&quot;666666&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">myCard.deposit(<span class="string">&quot;567891&quot;</span>, <span class="number">5000</span>);<span class="comment">//deposit money</span></span><br><span class="line">myCard.withdraw(<span class="string">&quot;666666&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">myCard.withdraw(<span class="string">&quot;567891&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">myCard.withdraw(<span class="string">&quot;567891&quot;</span>,<span class="number">5000</span>);<span class="comment">//withdraw money</span></span><br><span class="line">myCard.displayCustomer(<span class="string">&quot;666666&quot;</span>);</span><br><span class="line">myCard.displayCustomer(<span class="string">&quot;567891&quot;</span>);<span class="comment">//displayCustomer</span></span><br><span class="line">myCard.changePassWord(<span class="string">&quot;666666&quot;</span>, <span class="string">&quot;567891&quot;</span>, <span class="string">&quot;567891&quot;</span>);</span><br><span class="line">myCard.changePassWord(<span class="string">&quot;888888&quot;</span>, <span class="string">&quot;567891&quot;</span>, <span class="string">&quot;567891&quot;</span>);</span><br><span class="line">myCard.changePassWord(<span class="string">&quot;567891&quot;</span>, <span class="string">&quot;567891&quot;</span>, <span class="string">&quot;666666&quot;</span>);<span class="comment">//change password situations</span></span><br><span class="line">myCard.deposit(<span class="string">&quot;666666&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">myCard.deposit(<span class="string">&quot;567891&quot;</span>, <span class="number">5000</span>);<span class="comment">//when change password deposit money</span></span><br><span class="line">myCard.withdraw(<span class="string">&quot;666666&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">myCard.withdraw(<span class="string">&quot;567891&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">myCard.withdraw(<span class="string">&quot;567891&quot;</span>,<span class="number">5000</span>);<span class="comment">//when change password withdraw money</span></span><br><span class="line">myCard.displayCustomer(<span class="string">&quot;666666&quot;</span>);</span><br><span class="line">myCard.displayCustomer(<span class="string">&quot;567891&quot;</span>);<span class="comment">//when change password displayCustomer</span></span><br><span class="line">myCard.getbalance();</span><br><span class="line">myCard.getID();</span><br><span class="line">myCard.getPhone();</span><br><span class="line">myCard.getPelpleID();</span><br><span class="line">myCard.getName();</span><br><span class="line">myCard.setName(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">myCard.setName(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">myCard.setPeopleID(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;430725200112190032&quot;</span>);</span><br><span class="line">myCard.setPeopleID(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;430725200112190032&quot;</span>);</span><br><span class="line">myCard.setPhone(<span class="string">&quot;666666&quot;</span>,<span class="string">&quot;18569126258&quot;</span>);</span><br><span class="line">myCard.setPhone(<span class="string">&quot;567891&quot;</span>,<span class="string">&quot;18569126258&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java类基础实验</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java实现算法实验1</title>
    <link href="https://pistachiout.github.io/wiki/%E7%BC%96%E7%A8%8B%E8%AE%A1%E7%AE%971^1+2^2+3^3+4^4+5^5+%E2%80%A6%E2%80%A6+20^20/"/>
    <id>https://pistachiout.github.io/wiki/%E7%BC%96%E7%A8%8B%E8%AE%A1%E7%AE%971^1+2^2+3^3+4^4+5^5+%E2%80%A6%E2%80%A6+20^20/</id>
    <published>2023-02-16T10:54:55.478Z</published>
    <updated>2023-02-23T09:02:50.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-用对分法解方程-x-1-x2F-2-x3D-cos-x-（x-gt-0）"><a href="#1-用对分法解方程-x-1-x2F-2-x3D-cos-x-（x-gt-0）" class="headerlink" title="1.用对分法解方程 x^(1&#x2F;2)&#x3D;cos(x) （x&gt;0）"></a>1.用对分法解方程 x^(1&#x2F;2)&#x3D;cos(x) （x&gt;0）</h2><p>a、先在纸上研究好算法<br>b、使用Math.sqrt(), Math.cos(),Math.PI;<br>c、实型数的比较方法（不能用相等，要用差的绝对值很小作为判断）<br>d、大致的结果区间<br>e、怎么结束，常量（到怎样的精度则停止循环计算）（Math.abs()）<br>f、取中值<br>g、例子：-1.3*X+2&#x3D;sinX</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">double</span> minNum=<span class="number">0d</span>,maxNum=<span class="number">1d</span>,xNumber=<span class="number">0.5d</span>,sqrt,cos,absSubstractiveSum=<span class="number">1d</span>;</span><br><span class="line"><span class="keyword">for</span>(;absSubstractiveSum&gt;<span class="number">0.0000001</span>;)</span><br><span class="line">&#123;sqrt=Math.sqrt(xNumber);</span><br><span class="line"> cos=Math.cos(xNumber);</span><br><span class="line"> absSubstractiveSum=(<span class="type">double</span>)Math.abs(sqrt-cos);</span><br><span class="line"> <span class="keyword">if</span>(sqrt-cos&lt;<span class="number">0</span>)</span><br><span class="line"> &#123;minNum=xNumber;</span><br><span class="line"> xNumber=(minNum+maxNum)/<span class="number">2</span>;&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;maxNum=xNumber;</span><br><span class="line"> xNumber=(minNum+maxNum)/<span class="number">2</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(xNumber);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210602231655472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-用欧几里德辗转相除法求两个正整数的最大公约数"><a href="#2-用欧几里德辗转相除法求两个正整数的最大公约数" class="headerlink" title="2. 用欧几里德辗转相除法求两个正整数的最大公约数"></a>2. 用欧几里德辗转相除法求两个正整数的最大公约数</h2><p><img data-src="https://img-blog.csdnimg.cn/20210602231644248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ogimed</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">52</span>,b=<span class="number">4</span>;</span><br><span class="line">System.out.println(getGCD(a,b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getGCD</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a%b==<span class="number">0</span>)</span><br><span class="line"> <span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">return</span> getGCD(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-利用级数展开式计算cos（x）"><a href="#3-利用级数展开式计算cos（x）" class="headerlink" title="3.利用级数展开式计算cos（x）"></a>3.利用级数展开式计算cos（x）</h2><p>a、注意循环控制的设计(结束条件)<br>b、反复查找了源程序，没有问题，但运行的结果就是不对，试着从其他方面找原因<br>c、可以和Math.cos()的结果做一个比较<br>d、不用数组。到网上找通项公式；<br>e、结束条件，常量<br><img data-src="https://img-blog.csdnimg.cn/20210602231639180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CosX</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">System.out.println(cos(x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">cos</span><span class="params">(<span class="type">double</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> sumOfItem=<span class="number">1</span>;</span><br><span class="line"><span class="type">double</span> item=x;</span><br><span class="line"><span class="type">double</span> EPSILON=<span class="number">0.0000000000000001</span>;</span><br><span class="line"><span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(Math.abs(item)&gt;EPSILON)</span><br><span class="line">&#123;item=-item*x*x/((<span class="number">2</span>*num)*(<span class="number">2</span>*num-<span class="number">1</span>));</span><br><span class="line">sumOfItem+=item;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sumOfItem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-编程计算1000以内的质数（输出格式：一行10个，按列右对齐）"><a href="#4-编程计算1000以内的质数（输出格式：一行10个，按列右对齐）" class="headerlink" title="4. 编程计算1000以内的质数（输出格式：一行10个，按列右对齐）"></a>4. 编程计算1000以内的质数（输出格式：一行10个，按列右对齐）</h2><p>a、注意设计好“信号变量”，isPrime<br>b、Switch((Integer.toString(intWorker)).length())<br>c、如何按列右对齐<br>    5. 将任意一个字符串颠倒排列输出<br>       a、引用正确的类及其方法<br>         b、主要是合理运用String或StringBuffer的方法以及循环控制<br>         c、学习使用length()、charAt()等函数<br>         d、研究各种可能的情况<br>         <img data-src="https://img-blog.csdnimg.cn/2021060223155931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">primeNumInside1000</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i==j)</span><br><span class="line">&#123;String str=Integer.toString(j);</span><br><span class="line">System.out.printf(<span class="string">&quot;%4s&quot;</span>,str);</span><br><span class="line">num++;&#125;;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">10</span>)</span><br><span class="line">&#123;num=<span class="number">0</span>;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-将任意一个字符串颠倒排列输出"><a href="#5-将任意一个字符串颠倒排列输出" class="headerlink" title="5.将任意一个字符串颠倒排列输出"></a>5.将任意一个字符串颠倒排列输出</h2><p>a、引用正确的类及其方法<br>b、主要是合理运用String或StringBuffer的方法以及循环控制<br>c、学习使用length()、charAt()等函数<br>d、研究各种可能的情况<br><img data-src="https://img-blog.csdnimg.cn/2021060223162447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reverseString</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">StringBuffer str=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;anihC yadhtriB yppaH&quot;</span>);</span><br><span class="line">StringBuffer str2=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="type">int</span> length=str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> number=length;number&gt;<span class="number">0</span>;number--)</span><br><span class="line">&#123;<span class="type">char</span> temp=str.charAt(number-<span class="number">1</span>);</span><br><span class="line">str2.append(temp);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(str2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-符号三角形（输入－－＋－＋＋－＋）-第一行从第10列开始，整个三角形右对齐"><a href="#6-符号三角形（输入－－＋－＋＋－＋）-第一行从第10列开始，整个三角形右对齐" class="headerlink" title="6. 符号三角形（输入－－＋－＋＋－＋）(第一行从第10列开始，整个三角形右对齐)"></a>6. 符号三角形（输入－－＋－＋＋－＋）(第一行从第10列开始，整个三角形右对齐)</h2><p>a、想办法控制好输出的格式<br>b、什么是符号三角形<br>c、如何控制起始位置<br>d、字符的比较，是否可以考虑用异或<br><img data-src="https://img-blog.csdnimg.cn/20210602231632263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">symbolicTriangle</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">char</span>[] line=<span class="keyword">new</span> <span class="title class_">char</span>[]&#123;<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;+&#x27;</span>&#125;;</span><br><span class="line"> System.out.println(line);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;line[<span class="number">15</span>]!=<span class="string">&#x27; &#x27;</span>;i++)</span><br><span class="line">  &#123; <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">16</span>;j!=i;j--)</span><br><span class="line">      &#123;<span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> line[j]^line[j-<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        &#123;line[j]=<span class="string">&#x27;+&#x27;</span>;&#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        &#123;line[j]=<span class="string">&#x27;-&#x27;</span>;&#125;</span><br><span class="line">      &#125;</span><br><span class="line"> line[i]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"> System.out.println(line);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、编程计算1-1-2-2-3-3-4-4-5-5-……-20-20"><a href="#7、编程计算1-1-2-2-3-3-4-4-5-5-……-20-20" class="headerlink" title="7、编程计算1^1+2^2+3^3+4^4+5^5+……+20^20"></a>7、编程计算1^1+2^2+3^3+4^4+5^5+……+20^20</h2><p>b、注意结果的大小，体会数据的范围；<br>    c、需要用到数组；<br>    d、———————————–<br>    e、不能在运算过程中使用实型数<br>    f、使用数组，一个数组元素装一位<br>    g、要使用辅助方法。<br>    <img data-src="https://img-blog.csdnimg.cn/20210602231549133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowersumForm1to20</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">sumOf20Power20();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sumOf20Power20</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>[] sum=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span>[] temp;</span><br><span class="line">sum[<span class="number">0</span>]=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp=nPowerN(i);</span><br><span class="line">addToSum(temp,sum);</span><br><span class="line">display(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">carry</span><span class="params">(<span class="type">int</span>[] anArray)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;anArray.length-<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">anArray[i+<span class="number">1</span>]+=anArray[i]/<span class="number">10</span>;</span><br><span class="line">anArray[i]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addToSum</span><span class="params">(<span class="type">int</span>[] anArray,<span class="type">int</span>[] sumArray)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sumArray.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">sumArray[i]+=anArray[i];</span><br><span class="line">&#125;</span><br><span class="line">carry(sumArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nPowerN(<span class="type">int</span> aNumber)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>[] tempArray=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">50</span>];</span><br><span class="line">tempArray[<span class="number">0</span>]=aNumber;</span><br><span class="line">carry(tempArray);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;aNumber-<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;tempArray.length;j++)</span><br><span class="line">tempArray[j]*=aNumber;</span><br><span class="line">carry(tempArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tempArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span>[] anArray)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">boolean</span> isAllPrefixZero=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=anArray.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(anArray[i]!=<span class="number">0</span>)</span><br><span class="line">isAllPrefixZero=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!isAllPrefixZero)</span><br><span class="line">System.out.print(anArray[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java实现算法实验1</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://pistachiout.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java继承与多态</title>
    <link href="https://pistachiout.github.io/wiki/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
    <id>https://pistachiout.github.io/wiki/java%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%A4%9A%E6%80%81/</id>
    <published>2023-02-16T10:54:55.460Z</published>
    <updated>2023-02-23T08:59:49.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、设计一个数据类型判断类Polymorphism，使用重载、装箱等技术判断一个不带等号的Java表达式的结果的数据类型。"><a href="#1、设计一个数据类型判断类Polymorphism，使用重载、装箱等技术判断一个不带等号的Java表达式的结果的数据类型。" class="headerlink" title="1、设计一个数据类型判断类Polymorphism，使用重载、装箱等技术判断一个不带等号的Java表达式的结果的数据类型。"></a>1、设计一个数据类型判断类Polymorphism，使用重载、装箱等技术判断一个不带等号的Java表达式的结果的数据类型。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Polymorphism</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">INT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;int&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">LONG_TYPE</span> <span class="operator">=</span> <span class="string">&quot;long&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">DOUBLE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;double&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FLOAT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;float&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CHAR_TYPE</span> <span class="operator">=</span> <span class="string">&quot;char&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BYTE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;byte&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SHORT_TYPE</span> <span class="operator">=</span> <span class="string">&quot;short&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">BOOLAEN_TYPE</span> <span class="operator">=</span> <span class="string">&quot;boolean&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">String_TYPE</span> <span class="operator">=</span> <span class="string">&quot;String&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> INT_TYPE;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> LONG_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DOUBLE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">float</span> f)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FLOAT_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CHAR_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">byte</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BYTE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">short</span> s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SHORT_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(<span class="type">boolean</span> bo)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BOOLAEN_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(String Str)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getType</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj != <span class="literal">null</span> ? obj.toString().split(<span class="string">&quot;@&quot;</span>)[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;System.out.println(<span class="string">&quot;100是&quot;</span>+getType(<span class="number">100</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;1ds是&quot;</span>+getType(<span class="string">&quot;1ds&quot;</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;8==9是&quot;</span>+getType(<span class="number">8</span>==<span class="number">9</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;100.15是&quot;</span>+getType(<span class="number">100.15</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a是&quot;</span>+getType(<span class="string">&#x27;a&#x27;</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;100+222.5是&quot;</span>+getType(<span class="number">100</span>+<span class="number">222.5</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;100+&#x27;a&#x27;是&quot;</span>+getType(<span class="number">100</span>+<span class="string">&#x27;a&#x27;</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;5.9/54是&quot;</span>+getType(<span class="number">5.9</span>/<span class="number">54</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;599999999L是&quot;</span>+getType(<span class="number">599999999L</span>)+<span class="string">&quot;类型&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、设计一个链表结点类LinkNode"><a href="#2、设计一个链表结点类LinkNode" class="headerlink" title="2、设计一个链表结点类LinkNode"></a>2、设计一个链表结点类LinkNode</h2><p>此类可以存放int、long、float、double、byte、short、String、StringBuffer类型的数据。用此类：a、随机产生100个整数（范围自定）的链表，在生成的过程中从小到大排列，然后输出；b、随机产生100个6个英文字母的单词的链表，在生成的过程中从小到大排列，然后输出。（关注装箱和拆箱相关概念 Integer String）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span> Object value;</span><br><span class="line"><span class="keyword">public</span> LinkNode nextNode;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(Object value,LinkNode nextNode)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.value=value;</span><br><span class="line"><span class="built_in">this</span>.nextNode=nextNode;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(Object value)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.value=value;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> text5;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomInt</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">StringBuffer StrB=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line">LinkNode firstNode=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>);</span><br><span class="line">firstNode.nextNode=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">&#123;LinkNode aNew=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">LinkNode compare=firstNode.nextNode;</span><br><span class="line">LinkNode before=firstNode;</span><br><span class="line">compare=firstNode.nextNode;</span><br><span class="line"><span class="type">int</span> aNum=(<span class="type">int</span>)(Math.random()*<span class="number">1001</span>);</span><br><span class="line">aNew=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(aNum);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;compare=aNew;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(aNum&gt;Integer.parseInt(compare.value.toString()))</span><br><span class="line">&#123;<span class="keyword">if</span>(compare.nextNode!=<span class="literal">null</span>)</span><br><span class="line">&#123;compare=compare.nextNode;</span><br><span class="line"> before=before.nextNode;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;before=before.nextNode;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(before!=compare)</span><br><span class="line">&#123;before.nextNode=aNew;</span><br><span class="line">aNew.nextNode=compare;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">compare.nextNode=aNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">103</span>;i++)</span><br><span class="line">&#123;<span class="keyword">if</span>(i&gt;<span class="number">2</span>)</span><br><span class="line">&#123;System.out.print(i-<span class="number">2</span>+<span class="string">&quot;: &quot;</span>+firstNode.value+<span class="string">&quot;  &quot;</span>);&#125;</span><br><span class="line">firstNode=firstNode.nextNode;</span><br><span class="line"><span class="keyword">if</span>((i-<span class="number">2</span>)%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">package</span> text5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomStr</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">StringBuffer StrB=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line">LinkNode firstNode=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">firstNode.nextNode=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">105</span>;i++)</span><br><span class="line">&#123;LinkNode aNew=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">LinkNode compare=firstNode.nextNode;</span><br><span class="line">LinkNode before=firstNode;</span><br><span class="line">compare=firstNode.nextNode;</span><br><span class="line">StrB=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line">&#123;<span class="type">int</span> aNum=(<span class="type">int</span>)(Math.random()*<span class="number">26</span>);</span><br><span class="line"> <span class="type">char</span> aChar=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+aNum);</span><br><span class="line"> StrB.append(aChar);</span><br><span class="line">&#125;</span><br><span class="line">aNew=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(StrB);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">compare=aNew;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(StrB.toString().compareTo(compare.value.toString())&gt;<span class="number">0</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(compare.nextNode!=<span class="literal">null</span>)</span><br><span class="line">&#123;compare=compare.nextNode;</span><br><span class="line"> before=before.nextNode;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">&#123;before=before.nextNode;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(before!=compare)</span><br><span class="line">&#123;before.nextNode=aNew;</span><br><span class="line">aNew.nextNode=compare;&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">compare.nextNode=aNew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">103</span>;i++)</span><br><span class="line">&#123;<span class="keyword">if</span>(i&gt;<span class="number">2</span>)</span><br><span class="line">&#123;System.out.print(i-<span class="number">2</span>+<span class="string">&quot;: &quot;</span>+firstNode.value+<span class="string">&quot;  &quot;</span>);&#125;</span><br><span class="line">firstNode=firstNode.nextNode;</span><br><span class="line"><span class="keyword">if</span>((i-<span class="number">2</span>)%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601230548431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210601230554637.png" alt="在这里插入图片描述"></p><h2 id="3、A、在main-中使用上题的LinkNode类创建4个实例"><a href="#3、A、在main-中使用上题的LinkNode类创建4个实例" class="headerlink" title="3、A、在main()中使用上题的LinkNode类创建4个实例"></a>3、A、在main()中使用上题的LinkNode类创建4个实例</h2><p>并赋予不同的值（long、double、      StringBuffer、MyDate），然后使用Object中默认的toString()方法（从超级父类继承而来）  显示结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNodes</span> <span class="keyword">extends</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNodes</span><span class="params">(Object value,LinkNode nextNode)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.value=value;</span><br><span class="line"><span class="built_in">this</span>.nextNode=nextNode;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNodes</span><span class="params">()</span></span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkNodes</span><span class="params">(Object value)</span></span><br><span class="line">&#123;<span class="built_in">this</span>.value=value;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">(<span class="type">long</span> longNum)</span></span><br><span class="line">&#123;String str=longNum+<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">(<span class="type">double</span> doubleNum)</span></span><br><span class="line">&#123;String str=doubleNum+<span class="string">&quot;&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">(StringBuffer StrBuffer)</span></span><br><span class="line">&#123;String str=StrBuffer+<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">(MyDate myDateNum)</span></span><br><span class="line">&#123;String str=myDateNum.year+<span class="string">&quot; &quot;</span>+myDateNum.month+<span class="string">&quot; &quot;</span>+myDateNum.day+<span class="string">&quot; &quot;</span>+myDateNum.hour+<span class="string">&quot; &quot;</span>+myDateNum.minute+<span class="string">&quot; &quot;</span>+myDateNum.second;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B、继承LinkNode类创建新类LinkNodeS"><a href="#B、继承LinkNode类创建新类LinkNodeS" class="headerlink" title="B、继承LinkNode类创建新类LinkNodeS"></a>B、继承LinkNode类创建新类LinkNodeS</h2><p>在其中重写Object中默认的toString()方法（将结点的value转换成对应的字符串），main()中用LinkNodeS类同样创建4个实例，并赋予和上面同样的值（long、double、StringBuffer、MyDate），观察使用新的toString()方法的效果，体会继承与多态。(MyDate的日期toString用标准格式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseOfLinkNodes</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">StringBuffer strBuffer=<span class="keyword">new</span>  <span class="title class_">StringBuffer</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">MyDate myDate=<span class="keyword">new</span> <span class="title class_">MyDate</span>();</span><br><span class="line">LinkNode longNum=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">594785L</span>);</span><br><span class="line">LinkNode doubleNum=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">599.5</span>);</span><br><span class="line">LinkNode StringBuffer=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(strBuffer);</span><br><span class="line">LinkNode myDateNum=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(myDate);</span><br><span class="line">System.out.println(longNum.value.toString());</span><br><span class="line">System.out.println(doubleNum.value.toString());</span><br><span class="line">System.out.println(StringBuffer.value.toString());</span><br><span class="line">System.out.println(myDateNum.value.toString());</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">LinkNodes longNum2=<span class="keyword">new</span> <span class="title class_">LinkNodes</span>(<span class="number">594785L</span>);</span><br><span class="line">LinkNodes doubleNum2=<span class="keyword">new</span> <span class="title class_">LinkNodes</span>(<span class="number">599.5</span>);</span><br><span class="line">LinkNodes StringBuffer2=<span class="keyword">new</span> <span class="title class_">LinkNodes</span>(strBuffer);</span><br><span class="line">LinkNodes myDateNum2=<span class="keyword">new</span> <span class="title class_">LinkNodes</span>(myDate);</span><br><span class="line">String myDateNum2Str=myDateNum2.toString((MyDate)myDateNum2.value);</span><br><span class="line">System.out.println(longNum2.toString((<span class="type">long</span>)longNum2.value));</span><br><span class="line">System.out.println(doubleNum2.toString((<span class="type">double</span>)doubleNum2.value));</span><br><span class="line">System.out.println(StringBuffer2.toString((StringBuffer)StringBuffer2.value));</span><br><span class="line">System.out.println(myDateNum2Str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601230601934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4、：用Animal作为基类，鸟类、昆虫类、爬行类和鱼类作为Animal的子类设计类"><a href="#4、：用Animal作为基类，鸟类、昆虫类、爬行类和鱼类作为Animal的子类设计类" class="headerlink" title="4、：用Animal作为基类，鸟类、昆虫类、爬行类和鱼类作为Animal的子类设计类"></a>4、：用Animal作为基类，鸟类、昆虫类、爬行类和鱼类作为Animal的子类设计类</h2><p>有来自4个类别（鸟类、昆虫类、爬行类和鱼类）的100个动物聚在一起开会，商议和另一个动物部落打仗事宜，会议要求每个动物都要报告自己所属的动物类别和自己的天赋，以便选拔人才、组织兵力出战。<br>设计：用Animal作为基类，鸟类、昆虫类、爬行类和鱼类各作为Animal的子类设计类层次结构，设计时运用继承、重写并设计多态机制，同时对每个子类至少要添加一个其描述的动物特有的行为和一个特有的属性，以更准确地描述子类对象。<br>使用：用循环随机生成这100个动物装入动物数组，要对每个动物进行编号和随机命名，用循环让每个参会的动物报告自己的类别和天赋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> id;  <span class="comment">//编号</span></span><br><span class="line"><span class="keyword">public</span> StringBuffer name;<span class="comment">//名字</span></span><br><span class="line"><span class="keyword">public</span> String type; <span class="comment">//类别：鸟类、昆虫类、爬行类和鱼类之一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showType</span><span class="params">()</span><span class="comment">//在console上秀自己的类别</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My ID is “+id+” and I am just an animal, my type is going to be determined later.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTalent</span><span class="params">()</span><span class="comment">//在console上秀自己的天赋特长</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I don’t know what I am talented at right now.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My name is &quot;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="title function_">Fish</span><span class="params">(<span class="type">int</span> id,StringBuffer name)</span> </span><br><span class="line">&#123;<span class="built_in">this</span>.id=id;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.type=<span class="string">&quot;fish&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showType</span><span class="params">()</span><span class="comment">//在console上秀自己的类别</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My ID is &quot;</span>+id+<span class="string">&quot; and I am just an animal, my type is fish&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTalent</span><span class="params">()</span><span class="comment">//在console上秀自己的天赋特长</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I am talented at swiming&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">(<span class="type">int</span> id,StringBuffer name)</span> </span><br><span class="line">&#123;<span class="built_in">this</span>.id=id;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.type=<span class="string">&quot;bird&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showType</span><span class="params">()</span><span class="comment">//在console上秀自己的类别</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My ID is &quot;</span>+id+<span class="string">&quot; and I am just an animal, my type is bird&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTalent</span><span class="params">()</span><span class="comment">//在console上秀自己的天赋特长</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I am talented at flying&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insect</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="title function_">Insect</span><span class="params">(<span class="type">int</span> id,StringBuffer name)</span> </span><br><span class="line">&#123;<span class="built_in">this</span>.id=id;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.type=<span class="string">&quot;insect&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showType</span><span class="params">()</span><span class="comment">//在console上秀自己的类别</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My ID is &quot;</span>+id+<span class="string">&quot; and I am just an animal, my type is insect&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTalent</span><span class="params">()</span><span class="comment">//在console上秀自己的天赋特长</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I am talented at working&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reptile</span> <span class="keyword">extends</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;<span class="keyword">public</span> <span class="title function_">Reptile</span><span class="params">(<span class="type">int</span> id,StringBuffer name)</span> </span><br><span class="line">&#123;<span class="built_in">this</span>.id=id;</span><br><span class="line"><span class="built_in">this</span>.name=name;</span><br><span class="line"><span class="built_in">this</span>.type=<span class="string">&quot;reptile&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showType</span><span class="params">()</span><span class="comment">//在console上秀自己的类别</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;My ID is &quot;</span>+id+<span class="string">&quot; and I am just an animal, my type is reptile&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showTalent</span><span class="params">()</span><span class="comment">//在console上秀自己的天赋特长</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;I am talented at crawling&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnimalRandom</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Animal[] animalArmy = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">100</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> (<span class="type">int</span>)( Math.random()*<span class="number">4</span> );</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">word</span> <span class="operator">=</span> (<span class="type">int</span>)( Math.random()*<span class="number">26</span> );</span><br><span class="line">name.append( (<span class="type">char</span>)(word + <span class="string">&#x27;a&#x27;</span>) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">animalArmy[i] = <span class="keyword">new</span> <span class="title class_">Bird</span>(i, name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">animalArmy[i] = <span class="keyword">new</span> <span class="title class_">Fish</span>(i, name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">animalArmy[i] = <span class="keyword">new</span> <span class="title class_">Insect</span>(i, name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">animalArmy[i] = <span class="keyword">new</span> <span class="title class_">Reptile</span>(i,name);</span><br><span class="line">&#125;</span><br><span class="line">animalArmy[i].showName();</span><br><span class="line">animalArmy[i].showType();</span><br><span class="line">animalArmy[i].showTalent();</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601230608145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210601230613344.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210601230617670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">Java与面向对象基础实验</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java反射学习笔记</title>
    <link href="https://pistachiout.github.io/wiki/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://pistachiout.github.io/wiki/Java%E5%8F%8D%E5%B0%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-02-16T10:54:55.414Z</published>
    <updated>2023-02-23T09:06:42.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-反射概念"><a href="#1-反射概念" class="headerlink" title="1.反射概念"></a>1.反射概念</h2><p>JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息，通过Class实例获取class信息的方法称为<strong>反射（Reflection）</strong>。</p><p>JVM总是动态加载class，可以在运行期根据条件来控制加载class。 </p><p><img data-src="https://img-blog.csdnimg.cn/08d5fe35cb2d42aa881f518fb8a6d04a.png" alt="在这里插入图片描述"></p><h2 id="2-获取字段"><a href="#2-获取字段" class="headerlink" title="2.获取字段"></a>2.获取字段</h2><p><img data-src="https://img-blog.csdnimg.cn/5d1318e803bc48f7896cc40fe0657a8e.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/7285b9d59e2245e8ad772c60f66ef8db.png" alt="在这里插入图片描述"></p><p>先获取Class实例，再获取Field实例，然后调用Field.setAccessible(true)，用Field.get(Object)获取指定实例的指定字段的值。<br><img data-src="https://img-blog.csdnimg.cn/d83b3586dc394ffea47fc14cc3a0b122.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/0813128058b449cca55369856608e234.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/426195b5bccc444196dc4c64bf109c34.png" alt="在这里插入图片描述"></p><h2 id="3-调用方法"><a href="#3-调用方法" class="headerlink" title="3.调用方法"></a>3.调用方法</h2><p><img data-src="https://img-blog.csdnimg.cn/f3f0f6df4b8746d8ae8211ca793809f2.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/4ee7261e973d4d72872ce01deb7aedca.png" alt="在这里插入图片描述"></p><h2 id="4-调用构造方法"><a href="#4-调用构造方法" class="headerlink" title="4.调用构造方法"></a>4.调用构造方法</h2><p><img data-src="https://img-blog.csdnimg.cn/f7f9cccd1e044a759ca400955a5a1ed7.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/fd6a75d7726d4d24b89eb2977138dc82.png" alt="在这里插入图片描述"></p><h2 id="5-获取继承关系"><a href="#5-获取继承关系" class="headerlink" title="5.获取继承关系"></a>5.获取继承关系</h2><p><img data-src="https://img-blog.csdnimg.cn/806e06b48e3c4d06a5ffb533f06142f7.png" alt="在这里插入图片描述"></p><h2 id="6-动态代理"><a href="#6-动态代理" class="headerlink" title="6.动态代理"></a>6.动态代理</h2><p>Java标准库提供了一种动态代理（Dynamic Proxy）的机制：可以在运行期动态创建某个interface的实例。直接通过JDK提供的一个Proxy.newProxyInstance()创建了一个Hello接口对象。这种没有实现类但是在运行期动态创建了一个接口对象的方式，我们称为动态代码。JDK提供的动态创建接口对象的方式，就叫动态代理。<br><img data-src="https://img-blog.csdnimg.cn/a697f0dd2d284380872aa8eaa065c75e.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">JVM为每个加载的class创建了对应的Class实例，并在实例中保存了该class的所有信息，通过Class实例获取class信息的方法称为反射（Reflection）。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="学习笔记" scheme="https://pistachiout.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java比较器Comparator与Comparable</title>
    <link href="https://pistachiout.github.io/wiki/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AArandomValue%E5%80%BC%E7%9A%84%E6%AF%94%E8%BE%83%E5%99%A8%EF%BC%8C%E7%94%9F%E6%88%90%E4%B8%80%E5%89%AF%E7%89%8C%E5%90%8E%E7%94%A8%E6%AD%A4%E6%AF%94%E8%BE%83%E5%99%A8%E6%B4%97%E7%89%8C%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BE%93%E5%87%BA%E6%B4%97%E5%A5%BD%E7%9A%84%E6%95%B4%E5%89%AF%E7%89%8C%E3%80%82/"/>
    <id>https://pistachiout.github.io/wiki/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AArandomValue%E5%80%BC%E7%9A%84%E6%AF%94%E8%BE%83%E5%99%A8%EF%BC%8C%E7%94%9F%E6%88%90%E4%B8%80%E5%89%AF%E7%89%8C%E5%90%8E%E7%94%A8%E6%AD%A4%E6%AF%94%E8%BE%83%E5%99%A8%E6%B4%97%E7%89%8C%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BE%93%E5%87%BA%E6%B4%97%E5%A5%BD%E7%9A%84%E6%95%B4%E5%89%AF%E7%89%8C%E3%80%82/</id>
    <published>2023-02-16T10:54:55.389Z</published>
    <updated>2023-02-23T09:09:20.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-现有扑克牌类设计一个此类对randomValue值的比较器，生成一副牌后用此比较器洗牌，然后输出洗好的整副牌。"><a href="#1-现有扑克牌类设计一个此类对randomValue值的比较器，生成一副牌后用此比较器洗牌，然后输出洗好的整副牌。" class="headerlink" title="1.现有扑克牌类设计一个此类对randomValue值的比较器，生成一副牌后用此比较器洗牌，然后输出洗好的整副牌。"></a>1.现有扑克牌类设计一个此类对randomValue值的比较器，生成一副牌后用此比较器洗牌，然后输出洗好的整副牌。</h2><p>设计对rank值的比较器，然后对整副牌进行排序输出，观察效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Card</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Card&gt;&#123;</span><br><span class="line"><span class="type">char</span> suit;</span><br><span class="line"><span class="type">char</span> rank;</span><br><span class="line"><span class="type">double</span> randomValue;</span><br><span class="line">Card(<span class="type">char</span> aSuit,<span class="type">char</span> aRank)</span><br><span class="line">&#123;</span><br><span class="line">suit=aSuit;</span><br><span class="line">rank=aRank;</span><br><span class="line">randomValue=Math.random();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">dispaly</span><span class="params">()</span></span><br><span class="line">&#123;System.out.print( Character.toString(suit)+Character.toString(rank)+<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Card card)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.randomValue&gt;card.randomValue?<span class="number">1</span>:(<span class="built_in">this</span>.randomValue&lt;card.randomValue?-<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompareRank</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Card&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Card a,Card b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.rank&gt;b.rank?<span class="number">1</span>:(a.rank&lt;b.rank?-<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CardSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">char</span>[] suits= &#123;<span class="string">&#x27;梅&#x27;</span>,<span class="string">&#x27;方&#x27;</span>,<span class="string">&#x27;桃&#x27;</span>,<span class="string">&#x27;心&#x27;</span>&#125;;</span><br><span class="line"><span class="type">char</span>[] values= &#123;<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line">List&lt;Card&gt; cards=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Card&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">&#123; <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">  &#123; cards.add(<span class="keyword">new</span> <span class="title class_">Card</span>(suits[j],values[i]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cards.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&#x27;小&#x27;</span>,<span class="string">&#x27;鬼&#x27;</span>));</span><br><span class="line">cards.add(<span class="keyword">new</span> <span class="title class_">Card</span>(<span class="string">&#x27;大&#x27;</span>,<span class="string">&#x27;鬼&#x27;</span>));</span><br><span class="line">Collections.sort(cards);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">54</span>;i++)</span><br><span class="line">&#123;cards.get(i).dispaly();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">Collections.sort(cards,<span class="keyword">new</span> <span class="title class_">CompareRank</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">54</span>;i++)</span><br><span class="line">&#123;cards.get(i).dispaly();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601231323286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">现有扑克牌类设计一个此类对randomValue值的比较器，生成一副牌后用此比较器洗牌，然后输出洗好的整副牌。设计对rank值的比较器，然后对整副牌进行排序输出，观察效果。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    <category term="面向对象" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java10 API实验</title>
    <link href="https://pistachiout.github.io/wiki/%E7%94%A8Java%20I0%20api%E5%B0%86SomeData.txt%E5%85%B6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%87%BA%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%87%BA%E6%AF%8F%E4%B8%80%E8%A1%8C%E7%9A%84%E5%90%8E4%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%EF%BC%8C%E5%AD%98%E6%94%BE%E5%88%B0%E6%96%B0%E6%96%87%E4%BB%B6AvgSomeData.txt%E6%96%87%E4%BB%B6%E4%B8%AD%20(1)/"/>
    <id>https://pistachiout.github.io/wiki/%E7%94%A8Java%20I0%20api%E5%B0%86SomeData.txt%E5%85%B6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%87%BA%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%87%BA%E6%AF%8F%E4%B8%80%E8%A1%8C%E7%9A%84%E5%90%8E4%E5%88%97%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%EF%BC%8C%E5%AD%98%E6%94%BE%E5%88%B0%E6%96%B0%E6%96%87%E4%BB%B6AvgSomeData.txt%E6%96%87%E4%BB%B6%E4%B8%AD%20(1)/</id>
    <published>2023-02-16T10:54:55.355Z</published>
    <updated>2023-02-23T09:02:38.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看文本文件SomeData-txt中的数据并分析其格式，用Java-I0-api将其中的所有数据读出，计算出每一行的后4列数据的平均值，存放到新文件AvgSomeData-txt文件中，存放时每一行前面要加上行号（行号占3位，右对齐），平均值放到行末并左对齐。"><a href="#查看文本文件SomeData-txt中的数据并分析其格式，用Java-I0-api将其中的所有数据读出，计算出每一行的后4列数据的平均值，存放到新文件AvgSomeData-txt文件中，存放时每一行前面要加上行号（行号占3位，右对齐），平均值放到行末并左对齐。" class="headerlink" title="查看文本文件SomeData.txt中的数据并分析其格式，用Java I0 api将其中的所有数据读出，计算出每一行的后4列数据的平均值，存放到新文件AvgSomeData.txt文件中，存放时每一行前面要加上行号（行号占3位，右对齐），平均值放到行末并左对齐。"></a>查看文本文件SomeData.txt中的数据并分析其格式，用Java I0 api将其中的所有数据读出，计算出每一行的后4列数据的平均值，存放到新文件AvgSomeData.txt文件中，存放时每一行前面要加上行号（行号占3位，右对齐），平均值放到行末并左对齐。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FIleStream</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">FileReader inReader;</span><br><span class="line">FileWriter outWriter;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">inReader=<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:\\Documents\\SomeData.txt&quot;</span>);</span><br><span class="line">outWriter=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:\\Documents\\SomeData2.txt&quot;</span>);</span><br><span class="line"><span class="comment">//inReader.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;File can&#x27;t be found or File creates error.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BufferedReader in=<span class="keyword">new</span>  <span class="title class_">BufferedReader</span>(inReader);<span class="comment">//???????????????????????</span></span><br><span class="line">BufferedWriter out=<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(outWriter);<span class="comment">//????????????????????????</span></span><br><span class="line">String str;</span><br><span class="line"><span class="type">int</span> lineNo=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//inStream.read</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((str=in.readLine())!=<span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(str);</span><br><span class="line">String[] splits=str.split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;  &quot;</span>+(<span class="type">int</span>)(Double.parseDouble(splits[<span class="number">3</span>])+Double.parseDouble(splits[<span class="number">4</span>])+Double.parseDouble(splits[<span class="number">5</span>])+Double.parseDouble(splits[<span class="number">6</span>]))/<span class="number">4</span>);</span><br><span class="line">out.write(String.format(<span class="string">&quot;%1$03d&quot;</span>, lineNo++)+<span class="string">&quot;  &quot;</span>+str+<span class="string">&quot;\t&quot;</span>+(<span class="type">int</span>)(Double.parseDouble(splits[<span class="number">3</span>])+Double.parseDouble(splits[<span class="number">4</span>])+Double.parseDouble(splits[<span class="number">5</span>])+Double.parseDouble(splits[<span class="number">6</span>]))/<span class="number">4</span>+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">inReader.close();</span><br><span class="line">outWriter.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;\nIO Errors.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n\n\nDone!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/20210601231425337.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210601231429776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">查看文本文件SomeData.txt中的数据并分析其格式，用Java I0 api将其中的所有数据读出，计算出每一行的后4列数据的平均值，存放到新文件AvgSomeData.txt文件中，存放时每一行前面要加上行号（行号占3位，右对齐），平均值放到行末并左对齐。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>选择泛型集合类中的链表类</title>
    <link href="https://pistachiout.github.io/wiki/%E6%B3%9B%E5%9E%8B%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%93%BE%E8%A1%A8%E7%B1%BB%E9%9A%8F%E6%9C%BA%E4%BA%A7%E7%94%9F100%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B4%E6%95%B0%EF%BC%88%E5%8D%95%E8%AF%8D%EF%BC%89%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://pistachiout.github.io/wiki/%E6%B3%9B%E5%9E%8B%E9%9B%86%E5%90%88%E7%B1%BB%E4%B8%AD%E7%9A%84%E9%93%BE%E8%A1%A8%E7%B1%BB%E9%9A%8F%E6%9C%BA%E4%BA%A7%E7%94%9F100%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B4%E6%95%B0%EF%BC%88%E5%8D%95%E8%AF%8D%EF%BC%89%E7%9A%84%E9%93%BE%E8%A1%A8/</id>
    <published>2023-02-16T10:54:55.336Z</published>
    <updated>2023-02-23T09:11:07.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择泛型集合类中的链表类"><a href="#选择泛型集合类中的链表类" class="headerlink" title="选择泛型集合类中的链表类"></a>选择泛型集合类中的链表类</h2><p>用此类：a、随机产生100个整数（范围自定）的链表，在生成的过程中从小到大排列，然后输出；b、随机产生100个6个英文字母的单词的链表，在生成的过程中从小到大排列，然后用链表方式输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionsSort_IntAndStr</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">link100Int();</span><br><span class="line">link100String();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">link100Int</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LinkedList&lt;Integer&gt; linkInt=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">linkInt.add(random.nextInt(<span class="number">1001</span>));<span class="comment">//random.nextInt(n)产生随机值【0，n）</span></span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(linkInt);<span class="comment">//Collections.sort排序</span></span><br><span class="line">System.out.println(<span class="string">&quot;整数排序后&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(linkInt.get(i)+<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">link100String</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LinkedList&lt;String&gt; linkStr=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;StringBuffer StrB=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line"> &#123;</span><br><span class="line">  StrB.append((<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+(Math.random()*<span class="number">26</span>)));</span><br><span class="line"> &#125;</span><br><span class="line"> linkStr.add(StrB.toString());</span><br><span class="line">&#125;</span><br><span class="line">Collections.sort(linkStr);<span class="comment">//Collections.sort排序</span></span><br><span class="line">System.out.println(<span class="string">&quot;String排序后&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(linkStr.get(i)+<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">10</span>==<span class="number">0</span>)</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/2021060123141266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">选择泛型集合类中的链表类，用此类：a、随机产生100个整数（范围自定）的链表，在生成的过程中从小到大排列，然后输出；b、随机产生100个6个英文字母的单词的链表，在生成的过程中从小到大排列，然后用链表方式输出。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用Python语言编程实现至少7种排序算法</title>
    <link href="https://pistachiout.github.io/wiki/%E7%94%A8Python%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0%E8%87%B3%E5%B0%917%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://pistachiout.github.io/wiki/%E7%94%A8Python%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0%E8%87%B3%E5%B0%917%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-16T10:54:55.241Z</published>
    <updated>2023-02-23T09:02:44.049Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、实验目的及要求"><a href="#一、实验目的及要求" class="headerlink" title="一、实验目的及要求"></a>一、实验目的及要求</h2><p>1、用Python语言编程实现二分搜索算法：<br>已知不重复且已经按从小到大排好的m个整数的数组A[1..m]（设m&#x3D;2 k，k是一个确定的非负整数）。对于给定的整数c，要求寻找一个下标i，使得A[i]&#x3D;c；若找不到，则返回一个0。<br>2、用Python语言编程实现至少7种排序算法。<br><img data-src="https://img-blog.csdnimg.cn/20210519201853395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202016901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202025747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/202105192020342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202041348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202049198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202056330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202104402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210519202218871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202254242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210519202258791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​```c</span><br><span class="line">def BinarySearch(Arr,c):</span><br><span class="line">    if len(Arr)==0:</span><br><span class="line">       return -1</span><br><span class="line">    left=0</span><br><span class="line">    right=len(Arr)-1</span><br><span class="line">    while right&gt;left</span><br><span class="line">        mid=(left+right)//2</span><br><span class="line">        if Arr[mid]&lt;c:</span><br><span class="line">            left=mid+1</span><br><span class="line">        elif Arr[mid]&gt;x:</span><br><span class="line">            right=mid-1</span><br><span class="line">        else: </span><br><span class="line">            return mid</span><br><span class="line">return -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bubbleSort(nums):</span><br><span class="line">    for i in range(len(nums) - 1): # 遍历 len(nums)-1 次</span><br><span class="line">        for j in range(len(nums) - i - 1): # 已排好序的部分不用再次遍历</span><br><span class="line">            if nums[j] &gt; nums[j+1]:</span><br><span class="line">                nums[j], nums[j+1] = nums[j+1], nums[j] # Python 交换两个数不用中间变量</span><br><span class="line">    return nums</span><br><span class="line"></span><br><span class="line">def countingSort(nums):</span><br><span class="line">    bucket = [0] * (max(nums) + 1) # 桶的个数</span><br><span class="line">    for num in nums:  # 将元素值作为键值存储在桶中，记录其出现的次数</span><br><span class="line">        bucket[num] += 1</span><br><span class="line">    i = 0  # nums 的索引</span><br><span class="line">    for j in range(len(bucket)):</span><br><span class="line">        while bucket[j] &gt; 0:</span><br><span class="line">            nums[i] = j</span><br><span class="line">            bucket[j] -= 1</span><br><span class="line">            i += 1</span><br><span class="line">    return nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shellSort(nums):</span><br><span class="line">    step = len(nums)</span><br><span class="line">    while True:</span><br><span class="line">        step = int(step / 3 + 1)#增量序列依次减少</span><br><span class="line">        for n in range(step):   #希尔排序即在每个分组内用插入排序，增量从1变为step</span><br><span class="line">            for i in range(n + step, len(nums), step):</span><br><span class="line">                temp=nums[i]</span><br><span class="line">                j=i-step</span><br><span class="line">                while j&gt;=n and temp&lt;nums[j]:</span><br><span class="line">                    nums[j+step]=nums[j]</span><br><span class="line">                    j=j-step</span><br><span class="line">                    nums[j+step]=temp</span><br><span class="line">                    print(nums)     #插入排序</span><br><span class="line">        if step &lt;= 1:</span><br><span class="line">            break</span><br><span class="line">    </span><br><span class="line">def selectionSort(nums):</span><br><span class="line">    for i in range(len(nums)-1):#遍历len（nums）-1次</span><br><span class="line">        minIndex=i #最小值的下表</span><br><span class="line">        for j in range(i+1,len(nums))#在i到len（nums）之间找到最小值</span><br><span class="line">            if nums[j]&lt;num&#123;minIndex]</span><br><span class="line">                minIndex=j</span><br><span class="line">        nums[i],nums[minIndex]=nums[minIndex],nums[i]# 把最小值放在i位置之后i+1</span><br><span class="line">    return nums</span><br><span class="line">def quicksort(nums, ipos, epos):</span><br><span class="line">    if epos - ipos &lt;= 1:</span><br><span class="line">        return nums</span><br><span class="line">    beg = ipos</span><br><span class="line">    end = epos</span><br><span class="line">    while ipos &lt; epos:</span><br><span class="line">        while nums[ipos] &lt; nums[epos]:</span><br><span class="line">            epos -= 1</span><br><span class="line">        nums[ipos], nums[epos] = nums[epos], nums[ipos]</span><br><span class="line">        while nums[epos] &gt; nums[ipos]:</span><br><span class="line">            ipos += 1</span><br><span class="line">        nums[ipos], nums[epos] = nums[epos], nums[ipos]</span><br><span class="line">    quicksort(nums, beg, ipos)</span><br><span class="line">    quicksort(nums, ipos + 1, end)</span><br><span class="line">def MergeSort(lists):</span><br><span class="line">    if len(lists) &lt;= 1:</span><br><span class="line">        return lists</span><br><span class="line">    num = int( len(lists) / 2 )</span><br><span class="line">    left = MergeSort(lists[:num])</span><br><span class="line">    right = MergeSort(lists[num:])</span><br><span class="line">    return Merge(left, right)</span><br><span class="line">def Merge(left,right):</span><br><span class="line">    r, l=0, 0</span><br><span class="line">    result=[]</span><br><span class="line">    while l&lt;len(left) and r&lt;len(right):</span><br><span class="line">        if left[l] &lt;= right[r]:</span><br><span class="line">            result.append(left[l])</span><br><span class="line">            l += 1</span><br><span class="line">        else:</span><br><span class="line">            result.append(right[r])</span><br><span class="line">            r += 1</span><br><span class="line">    result += list(left[l:])</span><br><span class="line">    result += list(right[r:])</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">def insertionSort(lst):</span><br><span class="line">    if len(lst) == 1:</span><br><span class="line">        return lst</span><br><span class="line">    for i in range(1, len(lst)):#插入排序i从1开始到len-1</span><br><span class="line">        temp = lst[i]</span><br><span class="line">        j = i - 1         #而j从0开始，从而对lit[0]也参与排序</span><br><span class="line">        while j &gt;= 0 and temp &lt; lst[j]:  </span><br><span class="line">            lst[j + 1] = lst[j]#将list[j]往后移</span><br><span class="line">            j -= 1</span><br><span class="line">            lst[j + 1] = temp#因为j=j-1，所以每次循环相当于新的j与temp换位置,直到排序完成（即相当于将list[i]大的数依次往后移使list[i]完成插入）</span><br><span class="line">            print(lst)</span><br><span class="line">    return lst```</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.</p>]]></content>
    
    
    <summary type="html">用Python语言编程实现至少7种排序算法</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="算法" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/"/>
    
    <category term="python" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    
    <category term="算法" scheme="https://pistachiout.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="python" scheme="https://pistachiout.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。</title>
    <link href="https://pistachiout.github.io/wiki/%E5%88%A9%E7%94%A8python%E7%88%AC%E5%8F%96%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E5%8F%91%E7%94%9F%E4%BB%A5%E6%9D%A5%E7%9A%84%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA%E3%80%82/"/>
    <id>https://pistachiout.github.io/wiki/%E5%88%A9%E7%94%A8python%E7%88%AC%E5%8F%96%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85%E5%8F%91%E7%94%9F%E4%BB%A5%E6%9D%A5%E7%9A%84%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B1%95%E7%A4%BA%E3%80%82/</id>
    <published>2023-02-16T10:54:55.210Z</published>
    <updated>2023-02-23T09:01:17.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容：利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。"><a href="#内容：利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。" class="headerlink" title="内容：利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。"></a>内容：利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。</h2><p>要求：数据源可自己选择，可视化的内容尽量丰富，除了简单的直方图、曲线图外，还可以有新增确诊&#x2F;疑似病例图、地理分布图、传播动态图等，具体功能自行设计。以Matplotlib为主，可利用Pyecharts等为补充。暂不要求页面部署及用户交互。</p><p>   在这次实验中，我有了上次实验中学习python的经验，在了解这次实验是爬虫算法后，我就在b站看学习爬虫的视频，了解了爬取代码与正则表达式等内容，但在之后开始自己写爬虫后却发现并不像自己想象的那么简单，而且对于如何可视化也没有头绪，于是只好在网上查找新冠疫情爬取的代码，在查找代码的过程中我发现了一个很好的实时疫情网站，里面的数据规律明显很容易爬取，于是我借鉴代码写出了爬虫程序，并将数据放入到excel表中，但在可视化的过程中任然不知道怎么做，之后我学习了一点可视化的内容，但写出代码运行仍然有问题，考虑到时间问题之后放弃可视化。</p><p><img data-src="https://img-blog.csdnimg.cn/20210519213241228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>四、实验总结</p><p>   这次实验给了我很多启示，在刚开始看到实验内容时，我认为爬虫很难学习，但发现自己在网上看视频后发现爬虫不像想象的那么难学，代码并不是很复杂，关键是找到正则表达式，之后自己在写的过程中更是发现不同网站源代码的爬取难易度大不相同，在网上学习别人的代码也学习很多，对python的理解也多了很多。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">import requests,os</span><br><span class="line">import re</span><br><span class="line">import xlwt#写入excel库</span><br><span class="line">import time#格式化时间</span><br><span class="line">import json#字符串转字典</span><br><span class="line">file_path = <span class="string">&#x27;E:/新冠疫情/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> not os.path.exists(file_path):</span><br><span class="line">    os.makedirs(file_path)</span><br><span class="line">    print(<span class="string">&#x27;======数据文件夹不存在=======&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;======数据文件夹创建成功======&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;======创建目录为%s======&#x27;</span>%(file_path))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;======数据保存在目录：%s======&#x27;</span> % (file_path))</span><br><span class="line">#检查并创建数据目录</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.163 Safari/535.1&#x27;</span>&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://ncov.dxy.cn/ncovh5/view/pneumonia?from=timeline&amp;isappinstalled=0&#x27;</span>, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line"># 请求页面</span><br><span class="line">response = str(response.content, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"># 中文重新编码</span><br><span class="line">areas_type_dic_raw = re.findall(<span class="string">&#x27;try &#123; window.getAreaStat = (.*?)&#125;catch\(e\)&#x27;</span>,response)</span><br><span class="line">areas_type_dic = json.loads(areas_type_dic_raw[<span class="number">0</span>])#将json对象转变为python对象</span><br><span class="line">count = <span class="number">2</span>#数据写入行数记录</span><br><span class="line">newworkbook = xlwt.Workbook()</span><br><span class="line">worksheet = newworkbook.add_sheet(<span class="string">&#x27;all_data&#x27;</span>)</span><br><span class="line"># 打开工作簿，创建工作表</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;省份名称&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;省份简称或城市名称&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">4</span>, <span class="string">&#x27;确诊人数&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">5</span>, <span class="string">&#x27;疑似人数&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">6</span>, <span class="string">&#x27;治愈人数&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">7</span>, <span class="string">&#x27;死亡人数&#x27;</span>)</span><br><span class="line">worksheet.write(<span class="number">1</span>, <span class="number">8</span>, <span class="string">&#x27;地区ID编码&#x27;</span>)</span><br><span class="line">#写入数据列标签</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> province_data in areas_type_dic:</span><br><span class="line">    provincename = province_data[<span class="string">&#x27;provinceName&#x27;</span>]</span><br><span class="line">    provinceshortName = province_data[<span class="string">&#x27;provinceShortName&#x27;</span>]</span><br><span class="line">    p_confirmedcount = province_data[<span class="string">&#x27;confirmedCount&#x27;</span>]</span><br><span class="line">    p_suspectedcount = province_data[<span class="string">&#x27;suspectedCount&#x27;</span>]</span><br><span class="line">    p_curedcount = province_data[<span class="string">&#x27;curedCount&#x27;</span>]</span><br><span class="line">    p_deadcount = province_data[<span class="string">&#x27;deadCount&#x27;</span>]</span><br><span class="line">    p_locationid = province_data[<span class="string">&#x27;locationId&#x27;</span>]</span><br><span class="line">    #用循环获取省级以及该省以下城市的数据</span><br><span class="line">    worksheet.write(count, <span class="number">2</span>, provincename)</span><br><span class="line">    worksheet.write(count, <span class="number">3</span>, provinceshortName)</span><br><span class="line">    worksheet.write(count, <span class="number">4</span>, p_confirmedcount)</span><br><span class="line">    worksheet.write(count, <span class="number">5</span>, p_suspectedcount)</span><br><span class="line">    worksheet.write(count, <span class="number">6</span>, p_curedcount)</span><br><span class="line">    worksheet.write(count, <span class="number">7</span>, p_deadcount)</span><br><span class="line">    worksheet.write(count, <span class="number">8</span>, p_locationid)</span><br><span class="line">                    #在工作表里写入省级数据</span><br><span class="line"></span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">                    #此处为写入行数累加，province部分循环</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> citiy_data in province_data[<span class="string">&#x27;cities&#x27;</span>]:</span><br><span class="line">        cityname = citiy_data[<span class="string">&#x27;cityName&#x27;</span>]</span><br><span class="line">        c_confirmedcount = citiy_data[<span class="string">&#x27;confirmedCount&#x27;</span>]</span><br><span class="line">        c_suspectedcount = citiy_data[<span class="string">&#x27;suspectedCount&#x27;</span>]</span><br><span class="line">        c_curedcount = citiy_data[<span class="string">&#x27;curedCount&#x27;</span>]</span><br><span class="line">        c_deadcount = citiy_data[<span class="string">&#x27;deadCount&#x27;</span>]</span><br><span class="line">        c_locationid = citiy_data[<span class="string">&#x27;locationId&#x27;</span>]</span><br><span class="line">                            #该部分获取某个省下某城市的数据</span><br><span class="line"></span><br><span class="line">        worksheet.write(count, <span class="number">3</span>, cityname)</span><br><span class="line">        worksheet.write(count, <span class="number">4</span>, c_confirmedcount)</span><br><span class="line">        worksheet.write(count, <span class="number">5</span>, c_suspectedcount)</span><br><span class="line">        worksheet.write(count, <span class="number">6</span>, c_curedcount)</span><br><span class="line">        worksheet.write(count, <span class="number">7</span>, c_deadcount)</span><br><span class="line">        worksheet.write(count, <span class="number">8</span>, c_locationid)</span><br><span class="line">                            #该部分在工作表里写入某城市的数据</span><br><span class="line"></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">                            #此处为写入行数累加，cities部分循环</span><br><span class="line">current_time = time.strftime(<span class="string">&quot;%Y-%m-%d-%H-%M-%S&quot;</span>, time.localtime())</span><br><span class="line">newworkbook.save(<span class="string">&#x27;E:\新冠疫情\疫情实时爬取-%s.xls&#x27;</span> % (current_time))</span><br><span class="line">print(<span class="string">&#x27;======数据爬取成功======&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爬取结果：<br><a href="https://download.csdn.net/download/qq_45808700/19598095?spm=1001.2014.3001.5503">https://download.csdn.net/download/qq_45808700&#x2F;19598095?spm&#x3D;1001.2014.3001.5503</a></p>]]></content>
    
    
    <summary type="html">利用python爬取新型冠状肺炎疫情发生以来的实时数据，并进行可视化展示。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="python" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/"/>
    
    <category term="课程实验" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E8%AF%BE%E7%A8%8B%E5%AE%9E%E9%AA%8C/"/>
    
    
    <category term="爬虫" scheme="https://pistachiout.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python" scheme="https://pistachiout.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx高并发实现原理</title>
    <link href="https://pistachiout.github.io/wiki/Nginx%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>https://pistachiout.github.io/wiki/Nginx%E9%AB%98%E5%B9%B6%E5%8F%91%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-02-16T10:54:55.193Z</published>
    <updated>2023-02-20T02:52:11.041Z</updated>
    
    <content type="html"><![CDATA[<p>﻿目前，互联网已经得到了广泛的普及与应用，个人电脑和移动设备的发展,使得即时信息与娱乐服务变的更加方便精巧,基础用户的不断增加使得应用访问量变得巨大。为了提供安全可靠的服务,服务器端正在面临着越来越大的压力。传统的服务器多线程业务逻辑设计在大量用户访问时支撑并发连接的能力有限，不利于构建高性能服务器架构。Nginx 作为当下的高并发连接的负载均衡服务器因其极强的性能得到广泛的使用。本文主要对高并发Nginx进行详细的介绍，重点说明使用Nginx实现Web系统的高并发的原理。</p><h1 id="一、Web系统高并发性"><a href="#一、Web系统高并发性" class="headerlink" title="一、Web系统高并发性"></a><strong>一、Web系统高并发性</strong></h1><h2 id="（一）高并发概念"><a href="#（一）高并发概念" class="headerlink" title="（一）高并发概念"></a>（一）高并发概念</h2><p>高并发在外行人眼里似乎很高大上，但其实并不难理解，它指的就是我们通过各种设计使得系统能够在同一时间并行处理很多请求。一般来说高并发是一个结果导向的东西，现实中的例子也不少。常见的高并发场景有：双11时淘宝等系统处理大量购物者的购物请求、选课时的学校选课系统、春节时12306网站处理大量的购票请求、微博出现各种惊人热搜等，高并发的概念并不是突然出现的，而是随着业务的发展而产生的需求。高并发的业务场景出现了，随之而来的就是要支持这个高并发业务场景的架构——技术要为业务服务，业务倒逼技术发展，高并发是随着业务发展的。</p><h2 id="（二）高并发指标"><a href="#（二）高并发指标" class="headerlink" title="（二）高并发指标"></a>（二）高并发指标</h2><p>接下来分析高并发的指标。高并发并不意味着仅仅只追求高性能。从宏观的角度来看，高并发系统有三个基本的设计目标，分别是高性能、高可用以及高可扩展性，而这三方面并不是孤立存在的，它们彼此之间是可以相互支撑的。</p><ol><li>高性能：性能主要体现了系统的并行处理能力，在有限的硬件投入下，提高性能就意味着能节省成本。衡量软件性能包括了响应时间、TPS、服务器资源利用率等客观指标，也可以是用户的主观感受（从程序员、业务用户、终端用户&#x2F;客户不同的视角，可能会得出不同的结论）。</li><li>.高可用性：可用即表示一般情况下系统可以正常服务的时间，指系统具有较高的无故障运行能力，可用性 &#x3D; 平均故障时间 &#x2F; 系统总运行时间。一个全年无故障，能够正常服务；而另一个过不久就出线上事故、宕机，那么用户肯定会选择前者，另外，如果系统可用性过低，也一定会大大拖累业务。</li><li>高扩展：表示的是系统处理的扩展能力。在流量高峰时能否在短时间内完成扩容，更平稳地承接峰值流量，比如双11、微博各种惊人热搜等流量巨大时的扩展能力。面对突发流量，不可能临时改造架构，最快的方式就是增加机器来线性提高系统的处理能力。从高并发系统的整体架构角度来看，扩展的目标不仅仅是把服务设计成无状态就行了，因为当流量增加 10 倍，业务服务可以快速扩容 10 倍，但是数据库可能就成为了新的瓶颈。我们需要站在整体架构的角度，而不仅仅是业务服务器的角度来考虑系统的扩展性，所以说，数据库、缓存、依赖的第三方、负载均衡、交换机带宽等等都是系统扩展时需要考虑的因素。我们要知道系统并发到了某一个量级之后，哪一个因素会成为我们的瓶颈点，从而针对性地进行扩展[1]。</li></ol><h2 id="（三）高并发架构实现的方法"><a href="#（三）高并发架构实现的方法" class="headerlink" title="（三）高并发架构实现的方法"></a>（三）高并发架构实现的方法</h2><p>高并发的解决方案包括以下几种：</p><ul><li><p>·流量优化： 防盗链处理（把一些恶意的请求拒之门外） ·</p></li><li><p>前端优化：减少HTTP请求、添加异步请求、启用浏览器的缓存和文件压缩、CDN加速、建立独立的图片服务器； ·</p><ul><li>服务端优化：页面静态化处理、并发处理、队列处理； ·.</li></ul></li><li><p>数据库优化：数据库的缓存、分库分表、分区操作、读写分离、负载均衡；</p></li><li><p>Web服务器优化：负载均衡。[3]</p></li></ul><p>以上案例总而言之在方法论上主要有两种：<strong>垂直扩展（Scale Up）与水平扩展（Scale Out）</strong>。<br><strong>垂直维度</strong>主要是针对单台计算机，通过升级软、硬件能力实现性能提升；水平维度则主要针对集群系统，利用合理的任务分配与任务分解实现性能的提升。垂直维度可包括以下措施：</p><ul><li>提升单机的硬件性能：通过增加内存、 CPU核数、存储容量、或者将磁盘 升级成SSD等堆硬件的方式来提升。</li><li>·提升单机的软件性能：使用缓存减少IO次数，使用并发或者异步的方式增加吞吐量。</li></ul><p><strong>水平维度</strong>可包括以下措施：</p><ul><li>·做好分层架构：这是横向扩展的前提，因为高并发系统往往业务复杂，通过分层处理可以简化复杂问题，更容易做到水平扩展。</li><li>·各层进行水平扩展：无状态水平扩容，有状态做分片路由。</li></ul><p>业务集群通常能设计成无状态的，而数据库和缓存往往是有状态的，因此需要设计分区键做好存储分片，当然也可以通过主从同步、读写分离的方案提升读性能。[2]</p><p>用一个比喻，你想要一个人打十个人，这时候就得想办法了。第一个办法就是努力锻炼自己，然后全副武装，这就是垂直扩展；第二个办法，你一看对面人多，你叫10多个兄弟，然后你们二十个打他们十个，这就是水平扩展；此外还有第三个不常用的办法，你找个门把住，每次就放一个大汉进来，打倒一个再放下一个，这个就是削峰限流的做法。<br>从上面举的例子容易看出，垂直维度方案比较适合业务阶段早期和成本可接受的阶段，该方案是提升性能最简单直接的方式，但是受成本与硬件能力天花板的限制。而水平维度方案所带来的好处一般在业务发展的后期才能体现出来，但是没有垂直方案的天花板问题。一旦达到一定的业务阶段，水平维度是技术发展的必由之路。</p><p>本文主要从理论层面研究水平维度上利用Nginx在web服务器上来实现一定的高并发的原理。</p><h1 id="二、Nginx实现高并发"><a href="#二、Nginx实现高并发" class="headerlink" title="二、Nginx实现高并发"></a>二、Nginx实现高并发</h1><p>Nginx是一款是由程序设计师Igor Sysoev所开发的高性能的 Web和 反向代理服务器，也是一个 IMAP&#x2F;POP3&#x2F;SMTP 代理服务器，以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，比如：Netflix，GitHub， SoundCloud， MaxCDN 等。[4]在高连接并发的情况下，Nginx是Apache服务器不错的替代品。Nginx的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。官方测试Nginx能够支撑5万并发链接，并且CPU、内存等资源消耗却非常低，运行非常稳定。<br>Nginx的主要着眼点就是其高性能以及对物理计算资源的高密度利用，因此其采用了不同的架构模型。受启发于多种操作系统设计中基于“事件”的高级 处理机制，Nginx采用了模块化、事件驱动、异步、单线程及非阻塞的架构，并大量采用了多路复用及事件通知机制。在Nginx中，连接请求由为数不多的几个仅包含一个线程的进程worker以高效的回环(run-loop)机制进行处理，而每个worker可以并行处理数千个的并发连接及请求。[5]</p><h2 id="（一）-Nginx实现高并发的整体架构"><a href="#（一）-Nginx实现高并发的整体架构" class="headerlink" title="（一） Nginx实现高并发的整体架构"></a>（一） Nginx实现高并发的整体架构</h2><p>Nginx 启动时，会生成两种类型的进程，一个是主进程 （master），一个或多个工作进程（worker），因此，Nginx 启动以后，查看操作系统的进程列表，我们就能看到至少有两个Nginx进程。master进程并不处理网络请求，主要负责调度和监控工作进程，接收外部的操作（信号），服务器实际处理网络请求及响应的是工作进程，在类 unix 系统上，Nginx可以配置多个工作进程，而每个工作进程都可以同时处理数以千计的网络请求，而工作进程包括核心和功能性模块，核心模块负责维持一个运行循环，执行网络请求处理的不同阶段的模块功能，也使得我们可以根据需要对功能模块进行适当的选择和修改，编译成具有特定功能的服务器。</p><h2 id="（二）-Nginx实现高并发的模块化设计"><a href="#（二）-Nginx实现高并发的模块化设计" class="headerlink" title="（二） Nginx实现高并发的模块化设计"></a>（二） Nginx实现高并发的模块化设计</h2><p>高度模块化的设计是 Nginx 的架构基础。1.核心模块：Nginx 服务器正常运行必不可少的模块，提供错误日志记录、配置文件解析、事件驱动机制、进程管理等核心功能。2.标准 HTTP 模块提供 HTTP 协议解析相关的功能。3.可选HTTP模块主要用于 扩展 标准的 HTTP 功能，让 Nginx 能处理一些特殊的服务。4.邮件服务模块主要用于支持 Nginx 的 邮件服务。5.第三方模块是为了扩展 Nginx 服务器应用，完成开发者自定义功能。Nginx服务器被分解为多个模块 ，每个模块就是一个功能模块 ，只负责自身的功能，模块之间严格遵循 “高内聚，低耦合”的原则，这有利于高并发的实现。[6]</p><h2 id="（三）-Nginx实现高并发的请求方式处理"><a href="#（三）-Nginx实现高并发的请求方式处理" class="headerlink" title="（三） Nginx实现高并发的请求方式处理"></a>（三） Nginx实现高并发的请求方式处理</h2><p>Nginx结合多进程机制和异步机制中的异步非阻塞方式。<br>服务器每当收到一个客户端时，就有服务器主进程生成一个子进程出来和客户端建立连接进行交互，直到连接断开，该子进程就结束了。使用多进程的好处是各个进程之间相互独立，不需要加锁，减少了使用锁对性能造成影响，同时降低编程的复杂度，降低开发成本。其次，采用独立的进程，如果一个进程发生异常退出时，其它进程正常工作， master进程则很快启动新的工作进程，确保服务不会中断，从而将风险降到最低。<br>每个工作进程使用异步非阻塞方式，可以处理多个客户端请求。当某个工作进程接收到客户端的请求以后，调用 IO 进行处理，如果不能立即得到结果，就去处理其他请求（非阻塞），而客户端在此期间也无需等待响应，可以去处理其他事情（异步）当IO返回时，就会通知此工作进程，该进程得到通知，暂时挂起当前处理的事务去响应客户端请求。Nginx 的异步非阻塞工作方式正把当中的等待时间利用起来了。在需要等待的时候，这些进程就空闲出来待命了，因此表现为少数几个进程就解决了大量的并发问题。</p><h2 id="（四）-Nginx实现高并发的进程处理模型"><a href="#（四）-Nginx实现高并发的进程处理模型" class="headerlink" title="（四） Nginx实现高并发的进程处理模型"></a>（四） Nginx实现高并发的进程处理模型</h2><p>Nginx 在启动后，会有一个主进程和多个相互独立的工作进程，主进程负责接收来自外界的信号，向各工作进程发送信号，每个进程都有可能来处理这个连接。主进程能监控工作进程的运行状态，当工作进程由于异常情况退出后，会自动启动新的工作进程。每进来一个请求，会有一个工作进程去处理。但不是全程的处理，处理到可能发生阻塞的地方，比如向上游（后端）服务器转发请求，并等待请求返回。那么，这个处理的工作不会这么傻等着，他会在发送完请求后，注册一个事件：“如果upstream返回了，告诉我一声，我再接着干”。于是他就休息去了。此时，如果再有请求进来，他就可以很快再按这种方式处理。而一旦上游服务器返回了，就会触发这个事件，工作才会来接手，这个请求才会接着往下走。<br>由于web server的工作性质决定了每个请求的大部份生命都是在网络传输中，实际上花费在server机器上的时间片不多，这就是为什么几个进程就解决了高并发。每个工作进程都是独立的进程，不共享资源，不需要加锁。采用独立的进程，可以让互相之间不会影响，一个进程退出后，其它进程还在工作，服务不会中断，主进程则很快重新启动新的工作进程。而且 Nginx为了更好的利用多核特性，提供CPU亲缘性的绑定选项，我们可以将某一个进程绑定在某一个核上，这样就不会因为进程的切换 带来 Cache 的失效对于每个请求，有且只有一个工作进程对其处理。[9]</p><h2 id="（五）-Nginx实现高并发的反向代理与负载均衡"><a href="#（五）-Nginx实现高并发的反向代理与负载均衡" class="headerlink" title="（五） Nginx实现高并发的反向代理与负载均衡"></a>（五） Nginx实现高并发的反向代理与负载均衡</h2><p>反向代理方式是指以代理服务器来接收internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。反向代理隐藏了真实的服务端，当我们请求 <a href="http://www.baidu.com/">www.baidu.com</a> 的时候，就像拨打 10086 一样，背后可能有成千上万台服务器为我们服务，但具体是哪一台，你不知道，也不需要知道，你只需要知道反向代理服务器是谁就好了，<a href="http://www.baidu.com/">www.baidu.com</a> 就是我们的反向代理服务器，反向代理服务器会帮我们把请求转发到真实的服务器那里去。Nginx 就是性能非常好的反向代理服务器，用来做负载均衡。<br>而什么是负载均衡呢？随着请求数的快速增长，单服务器已经无法承担大量用户的并发访问，这个时候，就需要建立服务器集群，来让多台服务器协同工作，提高整体项目的吞吐量和QPS。假设一台设备资源占有率已经饱和，而另一台服务器却只有零星几个请求处理，这显然是不合理的。我们期望多台服务器需要平均承担客户端发来的请求，使每台机器都充分利用。这时，我们就需要用到一种技术，叫做负载均衡。负载均衡是多台服务器组合为一个集群，其中每台机器可以单独运行，服务器之间地位相同，通过负载均衡技术，将客户端发来的请求平均分配到每台服务器中，使得项目的负载能够均衡的分布，每台服务器的资源使用量也基本相同。通过负载均衡技术，使得项目巨额访问量从单台服务器均匀的分摊到每台服务器上。[10][12]<br>Nginx对外表现为服务器, 当接受到客户端的HTTP请求时, 并不产生响应, 但也不同于Squid等其他服务器直接转发, 而是会将用户发来的请求缓存一份, 然后再通过负载均衡算法将完整的请求缓存从它的上游集群服务器中选择合适的进行转发, 而上游服务器处理请求生成的响应会直接转发给Nginx, 此时Nginx会边接受边将响应转发给客户, 而不是完整地缓存到响应再一并转发。这正是Nginx作为反向代理服务器的优势所在。[15]<br>    <strong>Nginx负载均衡主要有三种策略。</strong></p><ul><li>轮循（默认）：Nginx根据请求次数，将每个请求均匀分配到每台服务器</li><li>最少连接：将请求分配给连接数最少的服务器。Nginx会统计哪些服务器的连接数最少。</li><li>·IP Hash：绑定处理请求的服务器。第一次请求时，根据该客户端的IP算出一个HASH值，将请求分配到集群中的某一台服务器上。后面该客户端的所有请求，都将通过HASH算法，找到之前处理这台客户端请求的服务器，然后将请求交给它来处理。[16][18]</li></ul><p>负载均衡对实现高并发有很大作用。<br>一是转发功能按照一定的算法，将客户端请求转发到不同应用服务器上，减轻单个服务器压力，提高系统并发量。<br>二是故障移除：通过心跳检测的方式，判断应用服务器当前是否可以正常工作，如果服务器期宕掉，自动将请求发送到其他应用服务器。<br>第三，恢复添加：如检测到发生故障的应用服务器恢复工作，自动将其添加到处理用户请求队伍中。</p><p>通过以上分析可以发现Nginx对比apache服务器的诸多优点。</p><ul><li>Nginx 更主要是作为反向代理，而非Web服务器使用。</li><li>Nginx是事件驱动服务器，最适合做的就是这种 I&#x2F;O 密集型工作，如反向代理。因为进程在一个地方进行计算时，那么这个进程就不能处理其他事件了。</li><li>Nginx 只需要少量进程配合事件驱动，而不像 Apache 多进程模型那样大量的进程数。</li><li>Nginx处理静态文件效果也很好，那是因为读写文件和网络通信其实都是 I&#x2F;O操作，处理过程一样。</li></ul><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>本文介绍了高并发的各种概念以及指标，接着说明了Nginx实现高并发的一些原理，并且对比apache服务器，就Nginx在实现高并发方面的诸多优点进行了分析说明。<br>当然本文只是在原理上做了一些分析，在实际中，高并发没有具体的标准，业务场景不一样，执行复杂度不一样，单看并发量也没有意义，必须结合具体场景进行判断。举个例子，访问百度首页通常情况下都是鼠标点击一下就看到结果了，几乎感觉不到等待时间，且百度每秒处理的访问量也非常的大，而如果支付宝扫描二维码支付，通常需要等较久的时间，这就是业务场景上的差距。再比如配置上的不同，用高配物理机得出的数据和最老最低配的虚拟器上的出来的结果是无法比较的。总之，高并发的本质不是多大算高并发的一个数字，而是从架构上、设计上、编码上怎么来保证或者解决由并发引起的问题。高并发的实际要求以及实现远远不止以上说到的内容，Nginx的实现也有更多的方法，往往要根据处理的业务场景和实际的设备以及要求做出灵活应变。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]冰河 海量数据处理与大数据技术实战 北京大学出版社2020-08-01<br>[2]李运华《从零开始学架构》 2021-01-23<br>[3]张开涛 亿级流量网站架构核心技术 电子工业出版社2017年<br>[4]吴宝花 基于Nginx的服务器集群负载均衡策略研究与优化[D].南昌大学,2020.<br>[5]吴翰清 《白帽子讲Web安全 》2012年电子工业出版社<br>[6]杜星. 轻量级Web服务器Nginx的理论与技术研究[D].南京邮电大学,2016.<br>[7]吴陈. 基于Nginx的服务器集群负载均衡策略的研究与改进[D].华南理工大学,2020.<br>[8]刘佳祎,崔建明,智春.基于Nginx服务器的动态负载均衡策略[J].桂林理工大学学报,2020,40(02):403-408.<br>[9]张泽宇. VPPNGX：基于FD.io VPP的高性能Nginx实现[D].上海交通大学,2020.<br>[10]刘茜. 一种基于Nginx负载均衡软件技术实现方法[A]. 天津市电子学会、天津市仪器仪表学会.第三十三届中国（天津）2019’IT、网络、信息技术、电子、仪器仪表创新学术会议论文集[C].天津市电子学会、天津市仪器仪表学会:天津市电子学会,2019:4.<br>[11]刘金秀,陈怡华,谷长乐.基于Nginx的高可用Web系统的架构研究与设计[J].现代信息科技,2019,3(11):94-97.<br>[12]林丽丽.使用高性能Web服务器Nginx实现开源负载均衡[J].大众科技,2010(07):37-38+27.<br>[13]许诺.大数据下基于Nginx负载均衡的教务系统优化设计[J].信息技术与信息化,2021(06):191-193.<br>[14]李刚.Nginx负载均衡技术在高校教务系统中的应用[J].辽宁师专学报(自然科学版),2020,22(03):19-22+32.<br>[15]赵凯.一种基于Nginx反向代理机制的微服务负载均衡方法分析[J].无线互联科技,2020,17(16):140-141.<br>[16]刘旻昊.Nginx服务器“秘籍”[J].中国传媒科技,2018(04):13-14.<br>[17]马原龙. Nginx负载均衡技术研究[D].重庆邮电大学,2016.<br>[18]王艳,陈卫卫.基于Nginx替代Apache在高并发WEB负载均衡系统中的应用[J].电子测试,2015(06):88-92.<br>[19]Castien René F,Coppieters Michel W,Durge Tom S C,ScholtenPeeters Gwendolyne G M. High concurrent validity between digital and analogue algometers to measure pressure pain thresholds in healthy participants and people with migraine: a cross-sectional study.[J]. The journal of headache and pain,2021,22(1):<br>[20]Wang Ling. Design and Implementation of Online Exam Platform Based on High-Concurrency Processing Mode[J]. International Journal of Computational and Engineering,2021,6(2):<br>[21]赵俊哲. 网络流量高并发优化处理研究[D].南京邮电大学,2020.</p>]]></content>
    
    
    <summary type="html">Nginx 作为当下的高并发连接的负载均衡服务器因其极强的性能得到广泛的使用。本文主要对高并发Nginx进行详细的介绍，重点说明使用Nginx实现Web系统的高并发的原理。</summary>
    
    
    
    <category term="论文研究" scheme="https://pistachiout.github.io/categories/%E8%AE%BA%E6%96%87%E7%A0%94%E7%A9%B6/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="论文" scheme="https://pistachiout.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>使用nvm管理node版本，实现高版本与低版本node之间的转换</title>
    <link href="https://pistachiout.github.io/wiki/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%8E%E4%BD%8E%E7%89%88%E6%9C%ACnode%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://pistachiout.github.io/wiki/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%8E%E4%BD%8E%E7%89%88%E6%9C%ACnode%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-02-16T10:54:55.178Z</published>
    <updated>2023-02-23T09:01:00.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-先清空本地安装的node-js版本"><a href="#1-先清空本地安装的node-js版本" class="headerlink" title="1.先清空本地安装的node.js版本"></a>1.先清空本地安装的node.js版本</h2><p>1.按健win+R弹出窗口，键盘输入cmd,然后敲回车（或者鼠标直接点击电脑桌面最左下角的win窗口图标弹出，输入cmd再点击回车键）<img data-src="https://img-blog.csdnimg.cn/bdefb4adcb694be8ba4423b6b3f99926.png" alt="在这里插入图片描述"></p><p>然后进入命令控制行窗口，并输入where node查看之前本地安装的node的路径</p><p><img data-src="https://img-blog.csdnimg.cn/8d859630827946a2b5764ae86160d76e.png" alt="在这里插入图片描述"></p><p>2.找到上面找到的路径，将node.exe所在的父目录里面的所有东西都删除</p><p>3.为了彻底删除之前安装的node.js，鼠标点击电脑左面最左下角的win窗口图标弹出，输入“控制面板”再点击回车键进入，进入控制面板后，找到所安装的node.js并卸载。<br><img data-src="https://img-blog.csdnimg.cn/edb98a407d4f4d79909568a5911e2219.png" alt="在这里插入图片描述"></p><h2 id="2-安装nvm管理工具"><a href="#2-安装nvm管理工具" class="headerlink" title="2.安装nvm管理工具"></a>2.安装nvm管理工具</h2><p>1.从官网下载安装包 <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a>，下载红框里面的那个<br>，下载后，直接进行安装<br><img data-src="https://img-blog.csdnimg.cn/542179cb24354244b5b8fa80c5599dfe.png" alt="在这里插入图片描述"></p><p>2.nvm安装完成后，检验是否安装成功，进入命令控制行窗口（进入方法见前面），<br>输入命令nvm v查看，如果出现版本号，即安装成功（如果安装不成功，查看之前自己安装的node.js有没有删除彻底、安装nvm工过程有没有漏掉什么！）。</p><p><img data-src="https://img-blog.csdnimg.cn/308f2578f49544c18e8340b1e65536a8.png" alt="在这里插入图片描述"></p><h2 id="3-安装node-js版本"><a href="#3-安装node-js版本" class="headerlink" title="3.安装node.js版本"></a>3.安装node.js版本</h2><p>(1) 输入命令行nvm ls anaillable查看可用的node.js版本号</p><p>(2) 输入命令行nvm install node版本号(例如：nvm install 12.17.0)即可安装对应版本以及自动安装对应的npm版本。<br><img data-src="https://img-blog.csdnimg.cn/4559fc4f3e0f44afa20141fb789bc232.png" alt="在这里插入图片描述"><br>安装完成后可以首先输入npm use+版本号（使用此命令行可以根据你自己的需要随意切换node.js版本运行），之后可分别输入命令行node -v和npm -v，检验node.js以及对应npm是否安装成功，如果可以显示版本号这说明安装成功。</p><p><img data-src="https://img-blog.csdnimg.cn/b16044d64c9046c5b9dfd75b9055fbe4.png" alt="在这里插入图片描述"></p><p>(4) 输入命令行nvm ls查看你安装的所有node.js版本号，以及你当前所选择的node.js运行版本</p><p><img data-src="https://img-blog.csdnimg.cn/7408562882904f05905f3c4548b0c42c.png" alt="在这里插入图片描述"></p><p>(4) 如果想删除某node.js版本的话，输入命令行nvm install node版本号（例如：nvm use 12.17.0）即可删除对应版本<br>总结：使用nvm来管理node.js的版本真的很方便，这样就可以根据自己的需要来回切换node.js版本！</p><h2 id="4-配置镜像"><a href="#4-配置镜像" class="headerlink" title="4.配置镜像"></a>4.配置镜像</h2><p>在 nvm 的安装路径下，找到 settings.txt，设置node_mirro与npm_mirror为国内镜像地址。下载就飞快了~~</p><p>root: D:\nvm<br>path: D:\nodejs<br>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a><br><img data-src="https://img-blog.csdnimg.cn/c87d180714a04b5895b7557d63cacef7.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">nvm使用教程</summary>
    
    
    
    <category term="实用软件及工具" scheme="https://pistachiout.github.io/categories/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://pistachiout.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Linux简单文件系统设计与实现</title>
    <link href="https://pistachiout.github.io/wiki/UNIX%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://pistachiout.github.io/wiki/UNIX%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2023-02-16T10:54:55.164Z</published>
    <updated>2023-02-23T09:05:56.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-1设计目的和内容要求"><a href="#1-1设计目的和内容要求" class="headerlink" title="1.1设计目的和内容要求"></a>1.1设计目的和内容要求</h1><h2 id="1-设计目的"><a href="#1-设计目的" class="headerlink" title="1. 设计目的"></a>1. 设计目的</h2><p>   通过具体的文件存储空间的管理、文件的物理结构、目录结构和文件操作的实现，加深对文件系统内部数据结构、功能以及实现过程的理解。</p><h2 id="2．内容要求"><a href="#2．内容要求" class="headerlink" title="2．内容要求"></a>2．内容要求</h2><p>(1)在内存中开辟一个虚拟磁盘空间作为文件存储分区，在其上实现一个简单的基于多级目录的单用户单任务系统中的文件系统。在退出该文件系统的使用时，应将该虚拟文件系统以一个文件的方式保存到磁盘上，以便下次可以再将它恢复到内存的虚拟磁盘空间中。<br>(2)文件存储空间的分配可采用显式链接分配或其他的办法。<br>(3)文件目录结构采用多级目录结构。为了简单起可以通过目录项实现对文件的读和写的保护。见，可以不使用索引结点，其中的每个目录项应包含文件名、物理地址、长度等信息，还<br>(4)要求提供以下操作命令：</p><ul><li>my_format：对文件存储器进行格式化，即按照文件系统的结构对虚拟磁盘空间进行布局，并在其上创建根目录以及用于管理文件存储空间等的数据结构。</li><li>my_mkdir：用于创建子目录。</li><li>my_rmdir：用于删除子目录。</li><li>my_ls：用于显示目录中的内容。</li><li>my_cd：用于更改当前目录。</li><li>my_create：用于创建文件。</li><li>my_open：用于打开文件。</li><li>my_close：用于关闭文件。</li><li>my_write：用于写文件。</li><li>my_read：用于读文件。</li><li>my_rm：用于删除文件。</li><li>List item</li></ul><p>my_exitsys：用于退出文件系统。</p><h1 id="1-2-预备知识"><a href="#1-2-预备知识" class="headerlink" title="1.2 预备知识"></a>1.2 预备知识</h1><h2 id="1．打开文件函数open"><a href="#1．打开文件函数open" class="headerlink" title="1．打开文件函数open()"></a>1．打开文件函数open()</h2><p>（1）格式：fd&#x3D;open(name, rwmode[,pmode]);<br>（2）功能：打开一个已存在的文件。</p><h2 id="2．关闭文件函数close"><a href="#2．关闭文件函数close" class="headerlink" title="2．关闭文件函数close()"></a>2．关闭文件函数close()</h2><p>（1）格式：status&#x3D;close(fd);<br>（2）功能：用来关闭先前open()打开的一个文件。此动作会让缓冲区内的数据写入文件中，并释放系统所提供的文件资源。</p><h2 id="3．读文件函数read"><a href="#3．读文件函数read" class="headerlink" title="3．读文件函数read()"></a>3．读文件函数read()</h2><p>（1）格式：n&#x3D; read( fd,buffer,size )；<br>（2）功能：对文件的读操作。<br>（3）输入参数说明：<br>n是一次读操作的返回字节数；<br> buffer：是指向读缓冲区的指针；<br>size：  本次读文件时请求读的字节数；</p><h2 id="4-写文件函数write"><a href="#4-写文件函数write" class="headerlink" title="4. 写文件函数write()"></a>4. 写文件函数write()</h2><p>（1）格式：n&#x3D; write( fd,buffer,size )；<br>（2）功能：将数据写到二进制文件中。<br>（3）输入参数说明：<br>n是一次写操作的返回字节数；<br> buffer：是指向写缓冲区的指针；<br>size：  本次写文件时请求写的字节数；</p><h2 id="5-定位文件函数lseek"><a href="#5-定位文件函数lseek" class="headerlink" title="5. 定位文件函数lseek()"></a>5. 定位文件函数lseek()</h2><p>（1）格式：newpos&#x3D;lseek( fd, offset, origin )；<br>（2）功能： 改变文件指针所处的位置。<br>（3）输入参数说明：<br>newpos是一个长整数返回值，若lseek调用成功则返回文件指针的新位置，若调用失败则返回-1；<br> fd是被打开文件的描述符<br>offset：位移量，以字节为单位；<br>origin：初始位置，是确定文件指针偏移量的基准点，有三个常量：<br>SEEK_CUR：读写指针当前位置；<br>SEEK_SET：文件开头；<br>SEEK_END：文件末尾。</p><h1 id="1-3实例系统的设计与实现"><a href="#1-3实例系统的设计与实现" class="headerlink" title="1.3实例系统的设计与实现"></a>1.3实例系统的设计与实现</h1><h2 id="1-3-1-数据结构设计"><a href="#1-3-1-数据结构设计" class="headerlink" title="1.3.1 数据结构设计"></a>1.3.1 数据结构设计</h2><h2 id="1．需要包含的头文件"><a href="#1．需要包含的头文件" class="headerlink" title="1．需要包含的头文件"></a>1．需要包含的头文件</h2><p>  （1）#include &lt;stdio.h&gt;<br>（2）#include &lt;malloc.h&gt;<br>（3）#include &lt;string.h&gt;<br>（4）#include &lt;time.h&gt;</p><h2 id="2．定义的常量"><a href="#2．定义的常量" class="headerlink" title="2．定义的常量"></a>2．定义的常量</h2><p>（1）#define  BLOCKSIZE  1024      磁盘块大小<br>（2）#define  SIZE         1024000   虚拟磁盘空间大小<br>（3）#define  END         65535     文件结束标志<br>（4）#define  FREE        0         盘块空闲标志<br>（5）#define  ROOTBLOCKNUM  2   根目录区所占盘块总数<br>（6）#define  MAXOPENFILE    10   最多同时打开文件个数</p><h2 id="3．数据结构"><a href="#3．数据结构" class="headerlink" title="3．数据结构"></a>3．数据结构</h2><h2 id="（1）文件控制块FCB"><a href="#（1）文件控制块FCB" class="headerlink" title="（1）文件控制块FCB"></a>（1）文件控制块FCB</h2><p>用于记录文件的描述和控制信息，每个文件设置一个FCB，它也是文件的目录项的内容。<br>    typedef struct FCB &#x2F;&#x2F;仿照FAT16设置的<br>{<br>        char filename[8]; &#x2F;&#x2F;文件名<br>        char exname[3];&#x2F;&#x2F;文件扩展名<br>        unsigned char attribute;&#x2F;&#x2F;文件属性字段：为简单起见，我们只为文件设置了两种属性：<br>&#x2F;&#x2F;值为0时表示目录文件，值为1时表示数据文件<br>        unsigned short time;&#x2F;&#x2F;文件创建时间<br>        unsigned short data;&#x2F;&#x2F;文件创建日期<br>        unsigned short first;&#x2F;&#x2F;文件起始盘块号<br>        unsigned long length;&#x2F;&#x2F;文件长度（字节数）<br>        char free；&#x2F;&#x2F;表示目录项是否为空，若值为0，表示空，值为1，表示已分配<br>}fcb;</p><h2 id="（2）文件分配表FAT"><a href="#（2）文件分配表FAT" class="headerlink" title="（2）文件分配表FAT"></a>（2）文件分配表FAT</h2><p>   在本实例中，文件分配表有两个作用：一是记录磁盘上每个文件所占据的磁盘块的块号；二是记录磁盘上哪些块已经分配出去了，哪些块是空闲的，即起到了位示图的作用。若FAT中某个表项的值为FREE，则表示该表项所对应的磁盘块是空闲的；若某个表项的值为END，则表示所对应的磁盘块是某文件的最后一个磁盘块；若某个表项的值是其他值，则该值表示某文件的下一个磁盘块的块号。为了提高系统的可靠性，本实例中设置了两张FAT表，它们互为备份，每个FAT占据两个磁盘块。<br>typedef struct FAT<br>{<br>        unsigned short id;<br>}fat;</p><h2 id="（3）用户打开文件表USEROPEN"><a href="#（3）用户打开文件表USEROPEN" class="headerlink" title="（3）用户打开文件表USEROPEN"></a>（3）用户打开文件表USEROPEN</h2><ul><li>当打开一个文件时，必须将文件的目录项中的所有内容全部复制到内存中，同时还要记录有关文件操作的动态信息，如读写指针的值等。在本实例中实现的是一个用于单用户单任务系统的文件系统，为简单起见，我们把用户文件描述符表和内存FCB表合在一起，称为用户打开文件表，表项数目为10，即一个用户最多可同时打开10个文件。然后用一个数组来描述，则数组下标即某个打开文件的描述符。另外，我们在用户打开文件表中还设置了一个字段“char dir[80]”，用来记录每个打开文件所在的目录名，以方便用户打开不同目录下具有相同文件名的不同文件。<br>  typedef struct USEROPEN<br>{<br>  char filename[8]; &#x2F;&#x2F;文件名<br>  char exname[3];&#x2F;&#x2F;文件扩展名<br>  unsigned char attribute;&#x2F;&#x2F;文件属性：值为0时表示目录文件，值为1时表示数据文件<br>  unsigned short time;&#x2F;&#x2F;文件创建时间<br>  unsigned short data;&#x2F;&#x2F;文件创建日期<br>  unsigned short first;&#x2F;&#x2F;文件起始盘块号<br>  unsigned long length;&#x2F;&#x2F;文件长度（对数据文件是字节数，对目录文件可以是目录项个数）<br>char free；&#x2F;&#x2F;表示目录项是否为空，若值为0，表示空，值为1，表示已分配<br>&#x2F;&#x2F;前面内容是文件的FCB中的内容。<br>&#x2F;&#x2F; 下面设置的dirno和diroff记录了相应打开文件的目录项在父目录文件中的位置，&#x2F;&#x2F;这样如果该文件的fcb被修改了，则要写回父目录文件时比较方便<br>   int dirno;  &#x2F;&#x2F;相应打开文件的目录项在父目录文件中的盘块号<br>int diroff；&#x2F;&#x2F; 相应打开文件的目录项在父目录文件的dirno盘块中的目录项序号<br>char dir[MAXOPENFILE][80]; &#x2F;&#x2F;相应打开文件所在的目录名，这样方便快速检查出<br>&#x2F;&#x2F;指定文件是否已经打开<br>  int count; &#x2F;&#x2F;读写指针在文件中的位置<br>   char fcbstate; &#x2F;&#x2F;是否修改了文件的FCB的内容，如果修改了置为1，否则为0<br>char topenfile; &#x2F;&#x2F;表示该用户打开表项是否为空，若值为0，表示为空，否则表示已<br>&#x2F;&#x2F;被某打开文件占据<br>}useropen;</li></ul><h2 id="（4）引导块BLOCK0"><a href="#（4）引导块BLOCK0" class="headerlink" title="（4）引导块BLOCK0"></a>（4）引导块BLOCK0</h2><p>​</p><ul><li>在引导块中主要存放逻辑磁盘的相关描述信息，比如磁盘块大小、磁盘块数量、文件分配表、根目录区、数据区在磁盘上的起始位置等。如果是引导盘，还要存放操作系统的引导信息。本实例是在内存的虚拟磁盘中创建一个文件系统，因此所包含的内容比较少，只有磁盘块大小、磁盘块数量、数据区开始位置、根目录文件开始位置等。<br>  typedef struct BLOCK0  &#x2F;&#x2F;引导块内容<br>{<br>&#x2F;&#x2F;存储一些描述信息，如磁盘块大小、磁盘块数量、最多打开文件数等、<br>  char information[200];<br>   unsigned short root; &#x2F;&#x2F;根目录文件的起始盘块号<br>  unsigned char *startblock; &#x2F;&#x2F;虚拟磁盘上数据区开始位置<br>}block0;</li></ul><p>  4．全局变量定义<br>  （1）unsigned char *myvhard： 指向虚拟磁盘的起始地址<br>  （2）useropen openfilelist[MAXOPENFILE]：   用户打开文件表数组<br>  （3）useropen <em>ptrcurdir： 指向用户打开文件表中的当前目录所在打开文件表项的位置；<br>  （4）char currentdir[80]：     记录当前目录的目录名（包括目录的路径）<br>  （5）unsigned char</em> startp：   记录虚拟磁盘上数据区开始位置</p><p>5．虚拟磁盘空间布局</p><ul><li>由于真正的磁盘操作需要涉及到设备的驱动程序，所以本实例是在内存中申请一块空间作为虚拟磁盘使用，我们的文件系统就建立在这个虚拟磁盘上。虚拟磁盘一共划分成1000个磁盘块，每个块1024个字节，其布局格式是模仿FAT文件系统设计的，其中引导块占一个盘块，两张FAT各占2个盘块，剩下的空间全部是数据区，在对虚拟磁盘进行格式化的时候，将把数据区第1块（即虚拟磁盘的第6块）分配给根目录文件。<br> 当然，也可以仿照FAT16文件系统，设置根目录区，其位置紧跟第2张FAT后面，大小也是固定的，这个思路相对要简单一点，请同学们自己去实现。</li></ul><h2 id="1-3-2-实例主要命令及函数设计"><a href="#1-3-2-实例主要命令及函数设计" class="headerlink" title="1.3.2 实例主要命令及函数设计"></a>1.3.2 实例主要命令及函数设计</h2><h2 id="1．系统主函数main"><a href="#1．系统主函数main" class="headerlink" title="1．系统主函数main()"></a>1．系统主函数main()</h2><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：void main()<br>（4）功能：系统主函数<br>（5）输入：无<br>（6）输出：无<br>（7）函数需完成的工作：<br>① 对前面定义的全局变量进行初始化；<br>② 调用startsys()进入文件系统；<br>③ 列出文件系统提供的各项功能及命令调用格式；<br>④ 显示命令行提示符，等待用户输入命令；<br>⑤ 将用户输入的命令保存到一个buf中；<br>⑥ 对buf中的内容进行命令解析，并调用相应的函数执行用户键入的命令；<br>⑦ 如果命令不是“my_exitsys”，则命令执行完毕后转④。</p><h2 id="2-进入文件系统函数startsys"><a href="#2-进入文件系统函数startsys" class="headerlink" title="2. 进入文件系统函数startsys()"></a>2. 进入文件系统函数startsys()</h2><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：void startsys()<br>（4）功能：由main()函数调用，进入并初始化我们所建立的文件系统，以供用户使用。<br>（5）输入：无  <br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 申请虚拟磁盘空间；<br>② 使用c语言的库函数fopen()打开myfsys文件：若文件存在，则转③；若文件不存在，则创建之，转⑤<br>③ 使用c语言的库函数fread()读入myfsys文件内容到用户空间中的一个缓冲区中，并判断其开始的8个字节内容是否为“10101010”（文件系统魔数），如果是，则转④；否则转⑤；<br>④ 将上述缓冲区中的内容复制到内存中的虚拟磁盘空间中；转⑦<br>⑤ 在屏幕上显示“myfsys文件系统不存在，现在开始创建文件系统”信息，并调用my_format()对①中申请到的虚拟磁盘空间进行格式化操作。转⑥；<br>⑥ 将虚拟磁盘中的内容保存到myfsys文件中；转⑦<br>⑦ 使用c语言的库函数fclose()关闭myfsys文件；<br>⑧ 初始化用户打开文件表，将表项0分配给根目录文件使用，并填写根目录文件的相关信息，由于根目录没有上级目录，所以表项中的dirno和diroff分别置为5（根目录所在起始块号）和0；并将ptrcurdir指针指向该用户打开文件表项。<br>⑨ 将当前目录设置为根目录。</p><h2 id="3．磁盘格式化函数my-format"><a href="#3．磁盘格式化函数my-format" class="headerlink" title="3．磁盘格式化函数my_format()"></a>3．磁盘格式化函数my_format()</h2><p>（1）对应命令：my_format<br>（2）命令调用格式：my_format<br>（3）函数设计格式：void my_format()<br>（4）功能：对虚拟磁盘进行格式化，布局虚拟磁盘，建立根目录文件（或根目录区）。<br>（5）输入：无  <br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 将虚拟磁盘第一个块作为引导块，开始的8个字节是文件系统的魔数，记为“10101010”；在之后写入文件系统的描述信息，如FAT表大小及位置、根目录大小及位置、盘块大小、盘块数量、数据区开始位置等信息；<br>② 在引导块后建立两张完全一样的FAT表，用于记录文件所占据的磁盘块及管理虚拟磁盘块的分配，每个FAT占据两个磁盘块；对于每个FAT中，前面5个块设置为已分配，后面995个块设置为空闲；<br>③ 在第二张FAT后创建根目录文件root，将数据区的第1块（即虚拟磁盘的第6块）分配给根目录文件，在该磁盘上创建两个特殊的目录项：“.”和“..”，其内容除了文件名不同之外，其他字段完全相同。 </p><h2 id="4．更改当前目录函数my-cd"><a href="#4．更改当前目录函数my-cd" class="headerlink" title="4．更改当前目录函数my_cd()"></a>4．更改当前目录函数my_cd()</h2><p>（1）对应命令：my_cd<br>（2）命令调用格式：my_cd dirname<br>（3）函数设计格式：void my_cd(char *dirname)<br>（4）功能：改变当前目录到指定的名为dirname的目录。<br>（5）输入：<br>dirname：新的当前目录的目录名；         <br>（6）输出：无<br>（7）函数需完成的工作：<br>① 调用my_open()打开指定目录名的父目录文件，并调用do_read()读入该父目录文件内容到内存中；<br>② 在父目录文件中检查新的当前目录名是否存在，如果存在则转③，否则返回，并显示出错信息；<br>③ 调用my_close()关闭①中打开的父目录文件；<br>④ 调用my_close()关闭原当前目录文件；<br>⑤ 如果新的当前目录文件没有打开，则打开该目录文件；并将ptrcurdir指向该打开文件表项；<br>⑥ 设置当前目录为该目录。</p><h2 id="5．创建子目录函数my-mkdir"><a href="#5．创建子目录函数my-mkdir" class="headerlink" title="5．创建子目录函数my_mkdir()"></a>5．创建子目录函数my_mkdir()</h2><p>（1）对应命令：my_mkdir<br>（2）命令调用格式：my_ mkdir dirname<br>（3）函数设计格式：void my_mkdir(char *dirname)<br>（4）功能：在当前目录下创建名为dirname的子目录。<br>（5）输入：<br>dirname：新建目录的目录名。         <br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 调用do_read()读入当前目录文件内容到内存，检查当前目录下新建目录文件是否重名，若重名则返回，并显示错误信息；<br>② 为新建子目录文件分配一个空闲打开文件表项，如果没有空闲表项则返回-1，并显示错误信息；<br>③ 检查FAT是否有空闲的盘块，如有则为新建目录文件分配一个盘块，否则释放①中分配的打开文件表项，返回，并显示错误信息；<br>④ 在当前目录中为新建目录文件寻找一个空闲的目录项或为其追加一个新的目录项;需修改当前目录文件的长度信息，并将当前目录文件的用户打开文件表项中的fcbstate置为1；<br>⑤ 准备好新建目录文件的FCB的内容，文件的属性为目录文件，以覆盖写方式调用do_write()将其填写到对应的空目录项中；<br>⑥ 在新建目录文件所分配到的磁盘块中建立两个特殊的目录项“.”和“..”目录项，方法是：首先在用户空间中准备好内容，然后以截断写或者覆盖写方式调用do_write()将其写到③中分配到的磁盘块中；<br>⑦ 返回。</p><h2 id="6．删除子目录函数rmdir"><a href="#6．删除子目录函数rmdir" class="headerlink" title="6．删除子目录函数rmdir()"></a>6．删除子目录函数rmdir()</h2><p>（1）对应命令：my_ rmdir<br>（2）命令调用格式：my_ rmdir dirname<br>（1）函数设计格式：void my_rmdir(char *dirname)<br>（2）功能：在当前目录下删除名为dirname的子目录。<br>（3）输入：<br>dirname：欲删除目录的目录名。         <br>（4）输出：无。<br>（5）函数需完成的工作：<br>① 调用do_read()读入当前目录文件内容到内存，检查当前目录下欲删除目录文件是否存在，若不存在则返回，并显示错误信息；<br>② 检查欲删除目录文件是否为空（除了“.”和“..”外没有其他子目录和文件），可根据其目录项中记录的文件长度来判断，若不为空则返回，并显示错误信息；<br>③ 检查该目录文件是否已经打开，若已打开则调用my_close()关闭掉；<br>④ 回收该目录文件所占据的磁盘块，修改FAT；<br>⑤ 从当前目录文件中清空该目录文件的目录项，且free字段置为0：以覆盖写方式调用do_write()来实现；<br>⑥ 修改当前目录文件的用户打开表项中的长度信息，并将表项中的fcbstate置为1；<br>⑦ 返回。</p><h2 id="7．显示目录函数my-ls"><a href="#7．显示目录函数my-ls" class="headerlink" title="7．显示目录函数my_ls()"></a>7．显示目录函数my_ls()</h2><p>（1）对应命令：my_ls<br>（2）命令调用格式：my_ls<br>（3）函数设计格式：void my_ls(void)<br>（4）功能：显示当前目录的内容（子目录和文件信息）。<br>（5）输入：无         <br>（6）输出：无<br>（7）函数需完成的工作：<br>① 调用do_read()读出当前目录文件内容到内存；<br>② 将读出的目录文件的信息按照一定的格式显示到屏幕上；<br>③ 返回。  </p><h2 id="8．创建文件函数my-create"><a href="#8．创建文件函数my-create" class="headerlink" title="8．创建文件函数my_create()"></a>8．创建文件函数my_create()</h2><p>（1）对应命令：my_create<br>（2）命令调用格式：my_create filename<br>（3）函数设计格式：int my_create (char *filename)<br>（4）功能：创建名为filename的新文件。<br>（5）输入：<br>filename：新建文件的文件名，可能包含路径。         <br>（6）输出：若创建成功，返回该文件的文件描述符（文件打开表中的数组下标）；否则返回-1。<br>（7）函数需完成的工作：<br>① 为新文件分配一个空闲打开文件表项，如果没有空闲表项则返回-1，并显示错误信息；<br>② 若新文件的父目录文件还没有打开，则调用my_open()打开；若打开失败，则释放①中为新建文件分配的空闲文件打开表项，返回-1，并显示错误信息；<br>③ 调用do_read()读出该父目录文件内容到内存，检查该目录下新文件是否重名，若重名则释放①中分配的打开文件表项，并调用my_close()关闭②中打开的目录文件；然后返回-1，并显示错误信息；<br>④ 检查FAT是否有空闲的盘块，如有则为新文件分配一个盘块，否则释放①中分配的打开文件表项，并调用my_close()关闭②中打开的目录文件；返回-1，并显示错误信息；<br>⑤ 在父目录中为新文件寻找一个空闲的目录项或为其追加一个新的目录项;需修改该目录文件的长度信息，并将该目录文件的用户打开文件表项中的fcbstate置为1；<br>⑥ 准备好新文件的FCB的内容，文件的属性为数据文件，长度为0，以覆盖写方式调用do_write()将其填写到⑤中分配到的空目录项中；<br>⑦ 为新文件填写①中分配到的空闲打开文件表项，fcbstate字段值为0，读写指针值为0；<br>⑧ 调用my_close()关闭②中打开的父目录文件；<br>⑨ 将新文件的打开文件表项序号作为其文件描述符返回。</p><h2 id="9．删除文件函数my-rm"><a href="#9．删除文件函数my-rm" class="headerlink" title="9．删除文件函数my_rm()"></a>9．删除文件函数my_rm()</h2><p>（1）对应命令：my_rm<br>（2）命令调用格式：my_rm filename<br>（3）函数设计格式：void my_rm(char *filename)<br>（4）功能：删除名为filename的文件。<br>（5）输入：<br>filename：欲删除文件的文件名，可能还包含路径。         <br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 若欲删除文件的父目录文件还没有打开，则调用my_open()打开；若打开失败，则返回，并显示错误信息；<br>② 调用do_read()读出该父目录文件内容到内存，检查该目录下欲删除文件是否存在，若不存在则返回，并显示错误信息；<br>③ 检查该文件是否已经打开，若已打开则关闭掉；<br>④ 回收该文件所占据的磁盘块，修改FAT；<br>⑤ 从文件的父目录文件中清空该文件的目录项，且free字段置为0：以覆盖写方式调用do_write()来实现；；<br>⑥ 修改该父目录文件的用户打开文件表项中的长度信息，并将该表项中的fcbstate置为1；<br>⑦ 返回。</p><h2 id="10．打开文件函数my-open"><a href="#10．打开文件函数my-open" class="headerlink" title="10．打开文件函数my_open()"></a>10．打开文件函数my_open()</h2><p>（1）对应命令：my_open<br>（2）命令调用格式：my_open filename<br>（3）函数设计格式：int my_open(char *filename)<br>（4）功能：打开当前目录下名为filename的文件。<br>（5）输入：<br>filename：欲打开文件的文件名         <br>（6）输出：若打开成功，返回该文件的描述符（在用户打开文件表中表项序号）；否则返回-1。<br>（7）函数需完成的工作：<br>① 检查该文件是否已经打开，若已打开则返回-1，并显示错误信息；<br>② 调用do_read()读出父目录文件的内容到内存，检查该目录下欲打开文件是否存在，若不存在则返回-1，并显示错误信息；<br>③ 检查用户打开文件表中是否有空表项，若有则为欲打开文件分配一个空表项，若没有则返回-1，并显示错误信息；<br>④ 为该文件填写空白用户打开文件表表项内容，读写指针置为0；<br>⑤ 将该文件所分配到的空白用户打开文件表表项序号（数组下标）作为文件描述符fd返回。</p><h2 id="11．关闭文件函数my-close"><a href="#11．关闭文件函数my-close" class="headerlink" title="11．关闭文件函数my_close()"></a>11．关闭文件函数my_close()</h2><p>（1）对应命令：my_close<br>（2）命令调用格式：my_close fd<br>（3）函数设计格式：void my_close(int fd)<br>（4）功能：关闭前面由my_open()打开的文件描述符为fd的文件。<br>（5）输入：<br>fd：文件描述符。         <br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1；<br>② 检查用户打开文件表表项中的fcbstate字段的值，如果为1则需要将该文件的FCB的内容保存到虚拟磁盘上该文件的目录项中，方法是：打开该文件的父目录文件，以覆盖写方式调用do_write()将欲关闭文件的FCB写入父目录文件的相应盘块中；<br>③ 回收该文件占据的用户打开文件表表项（进行清空操作），并将topenfile字段置为0；<br>④ 返回。</p><h2 id="12．写文件函数my-write"><a href="#12．写文件函数my-write" class="headerlink" title="12．写文件函数my_write()"></a>12．写文件函数my_write()</h2><p>（1）对应命令：my_write<br>（2）命令调用格式：my_write fd<br>（3）函数设计格式：int my_write(int fd)<br>（4）功能：将用户通过键盘输入的内容写到fd所指定的文件中。磁盘文件的读写操作都必须以完整的数据块为单位进行，在写操作时，先将数据写在缓冲区中，缓冲区的大小与磁盘块的大小相同，然后再将缓冲区中的数据一次性写到磁盘块中；读出时先将一个磁盘块中的内容读到缓冲区中，然后再传送到用户区。本实例为了简便起见，没有设置缓冲区管理，只是在读写文件时由用户使用malloc()申请一块空间作为缓冲区，读写操作结束后使用free()释放掉。<br>写操作常有三种方式：截断写、覆盖写和追加写。截断写是放弃原来文件的内容，重新写文件；覆盖写是修改文件在当前读写指针所指的位置开始的部分内容；追加写是在原文件的最后添加新的内容。在本实例中，输入写文件命令后，系统会出现提示让用户选择其中的一种写方式，并将随后键盘输入的内容按照所选的方式写到文件中，键盘输入内容通过CTR+Z键（或其他设定的键）结束。<br>（5）输入：<br>fd：  open()函数的返回值，文件的描述符；     <br>（6）输出：实际写入的字节数。<br>（7）函数需完成的工作：<br>① 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1，并显示出错信息；<br>② 提示并等待用户输入写方式：（1：截断写；2：覆盖写；3：追加写）<br>③ 如果用户要求的写方式是截断写，则释放文件除第一块外的其他磁盘空间内容（查找并修改FAT表），将内存用户打开文件表项中文件长度修改为0，将读写指针置为0并转④；如果用户要求的写方式是追加写，则修改文件的当前读写指针位置到文件的末尾，并转④；如果写方式是覆盖写，则直接转④；<br>④ 提示用户：整个输入内容通过CTR+Z键（或其他设定的键）结束；用户可分多次输入写入内容，每次用回车结束；<br>⑤ 等待用户从键盘输入文件内容，并将用户的本次输入内容保存到一临时变量text[]中，要求每次输入以回车结束，全部结束用CTR+Z键（或其他设定的键）；<br>⑥ 调用do_write()函数将通过键盘键入的内容写到文件中。<br>⑦ 如果do_write()函数的返回值为非负值，则将实际写入字节数增加do_write()函数返回值，否则显示出错信息，并转⑨；<br>⑧ 如果text[]中最后一个字符不是结束字符CTR+Z，则转⑦继续进行写操作；否则转⑨；<br>⑨ 如果当前读写指针位置大于用户打开文件表项中的文件长度，则修改打开文件表项中的文件长度信息，并将fcbstate置1；<br>⑩ 返回实际写入的字节数。</p><h2 id="13．实际写文件函数do-write"><a href="#13．实际写文件函数do-write" class="headerlink" title="13．实际写文件函数do_write()"></a>13．实际写文件函数do_write()</h2><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：int my_write(int fd，char *text，int len，char wstyle)<br>（4）功能：被写文件函数my_write()调用，用来将键盘输入的内容写到相应的文件中去。<br>（5）输入：<br>fd：  open()函数的返回值，文件的描述符；<br>text：指向要写入的内容的指针；<br>len：本次要求写入字节数    <br>wstyle：写方式<br>（6）输出：实际写入的字节数。<br>（7）函数需完成的工作：<br>① 用malloc()申请1024B的内存空间作为读写磁盘的缓冲区buf，申请失败则返回-1，并显示出错信息；<br>② 将读写指针转化为逻辑块块号和块内偏移off，并利用打开文件表表项中的首块号及FAT表的相关内容将逻辑块块号转换成对应的磁盘块块号blkno；如果找不到对应的磁盘块，则需要检索FAT为该逻辑块分配一新的磁盘块，并将对应的磁盘块块号blkno登记到FAT中，若分配失败，则返回-1，并显示出错信息；<br>③ 如果是覆盖写，或者如果当前读写指针所对应的块内偏移off不等于0，则将块号为blkno的虚拟磁盘块全部1024B的内容读到缓冲区buf中；否则便用ASCII码0清空buf；<br>④ 将text中未写入的内容暂存到缓冲区buff的第off字节开始的位置，直到缓冲区满，或者接收到结束字符CTR+Z为止；将本次写入字节数记录到tmplen中；<br>⑤ 将buf中1024B的内容写入到块号为blkno的虚拟磁盘块中；<br>⑥将当前读写指针修改为原来的值加上tmplen；并将本次实际写入的字节数增加tmplen；<br>⑦ 如果tmplen小于len，则转②继续写入；否则转⑧；<br>⑧ 返回本次实际写入的字节数。</p><h2 id="14．读文件函数my-read"><a href="#14．读文件函数my-read" class="headerlink" title="14．读文件函数my_read()"></a>14．读文件函数my_read()</h2><p>（1）对应命令：my_read<br>（2）命令调用格式：my_read fd len<br>（3）函数设计格式：int myread (int fd, int len)<br>（4）功能：读出指定文件中从读写指针开始的长度为len的内容到用户空间中。<br>（5）输入：<br>fd：  open()函数的返回值，文件的描述符；<br>len:   要从文件中读出的字节数。       <br>（6）输出：实际读出的字节数。<br>（7）函数需完成的工作：<br>① 定义一个字符型数组text[len]，用来接收用户从文件中读出的文件内容；<br>② 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1，并显示出错信息；<br>③ 调用do_read()将指定文件中的len字节内容读出到text[]中；<br>④ 如果do_read()的返回值为负，则显示出错信息；否则将text[]中的内容显示到屏幕上；<br>⑤ 返回。</p><h2 id="15．实际读文件函数do-read"><a href="#15．实际读文件函数do-read" class="headerlink" title="15．实际读文件函数do_read()"></a>15．实际读文件函数do_read()</h2><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：int do_read (int fd, int len,char *text)<br>（4）功能：被my_read()调用，读出指定文件中从读写指针开始的长度为len的内容到用户空间的text中。<br>（5）输入：<br>fd：  open()函数的返回值，文件的描述符；<br>len:   要求从文件中读出的字节数。       <br>text：指向存放读出数据的用户区地址<br>（6）输出：实际读出的字节数。<br>（7）函数需完成的工作：<br>① 使用malloc()申请1024B空间作为缓冲区buf，申请失败则返回-1，并显示出错信息；<br>② 将读写指针转化为逻辑块块号及块内偏移量off，利用打开文件表表项中的首块号查找FAT表，找到该逻辑块所在的磁盘块块号；将该磁盘块块号转化为虚拟磁盘上的内存位置；<br>③ 将该内存位置开始的1024B（一个磁盘块）内容读入buf中；<br>④ 比较buf中从偏移量off开始的剩余字节数是否大于等于应读写的字节数len，如果是，则将从off开始的buf中的len长度的内容读入到text[]中；否则，将从off开始的buf中的剩余内容读入到text[]中；<br>⑤ 将读写指针增加④中已读字节数，将应读写的字节数len减去④中已读字节数，若len大于0，则转②；否则转⑥；<br>⑥ 使用free()释放①中申请的buf。<br>⑦ 返回实际读出的字节数。</p><h2 id="16-退出文件系统函数my-exitsys"><a href="#16-退出文件系统函数my-exitsys" class="headerlink" title="16. 退出文件系统函数my_exitsys()"></a>16. 退出文件系统函数my_exitsys()</h2><p>（1）对应命令：my_exitsys<br>（2）命令调用格式：my_ exitsys<br>（1）函数设计格式：void my_exitsys()<br>（2）功能：退出文件系统。<br>（3）输入：无  <br>（4）输出：无。<br>（5）函数需完成的工作：<br>① 使用C库函数fopen()打开磁盘上的myfsys文件；<br>② 将虚拟磁盘空间中的所有内容保存到磁盘上的myfsys文件中；<br>③ 使用c语言的库函数fclose()关闭myfsys文件；<br>④ 撤销用户打开文件表，释放其内存空间<br>⑤ 释放虚拟磁盘空间。</p><h1 id="github代码地址"><a href="#github代码地址" class="headerlink" title="github代码地址"></a>github代码地址</h1><p><a href="https://github.com/1105358600/LunixFileSystem">https://github.com/1105358600/LunixFileSystem</a></p>]]></content>
    
    
    <summary type="html">在内存中开辟一个虚拟磁盘空间作为文件存储分区，在其上实现一个简单的基于多级目录的单用户单任务系统中的文件系统，并实现创建、打开、关闭、写、读、删除文件及目录的功能，在退出该文件系统的使用时，应将该虚拟文件系统以一个文件的方式保存到磁盘上，以便下次可以再将它恢复到内存的虚拟磁盘空间中。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="C++" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/"/>
    
    <category term="Linux" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/Linux/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Linux" scheme="https://pistachiout.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>基于SSM的在线提问、回答系统</title>
    <link href="https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8Essm%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%8F%90%E9%97%AE%E3%80%81%E5%9B%9E%E7%AD%94%E7%B3%BB%E7%BB%9F/"/>
    <id>https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8Essm%E7%9A%84%E5%9C%A8%E7%BA%BF%E6%8F%90%E9%97%AE%E3%80%81%E5%9B%9E%E7%AD%94%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-02-16T10:54:55.126Z</published>
    <updated>2023-02-23T09:05:32.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="名称：在线提问、回答系统"><a href="#名称：在线提问、回答系统" class="headerlink" title="名称：在线提问、回答系统"></a>名称：在线提问、回答系统</h1><h1 id="功能要求："><a href="#功能要求：" class="headerlink" title="功能要求："></a>功能要求：</h1><pre><code>1. 非登陆用户可以看其他人的问答，按最后一个回答时间的倒序排列2. 登陆用户可以发布、终结自己的问题。3. 对于未终结的问题，登陆用户可以发布、修改、删除自己的回答。4. 不分板块。5. 普通人可申请注册，管理员同意后算作注册成功；管理员可将现有用户拉黑，管理员不能删除用户。6. 被拉黑用户的问题、回答对其他人不可见。7. 管理员可以屏蔽掉某个问题或者回答，也可取消屏蔽。8. 被屏蔽的问题或回答对其他人不可见；提问人或回答人自己可见。9. 被屏蔽的问题或者回答，提问人或回答人不能改、删。</code></pre><h2 id="用例图："><a href="#用例图：" class="headerlink" title="用例图："></a>用例图：<img data-src="https://img-blog.csdnimg.cn/20210608225845732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2><h2 id="OOA类图："><a href="#OOA类图：" class="headerlink" title="OOA类图："></a>OOA类图：</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608225909749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2021060923190587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609231945612.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609232018563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609232054902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609232155372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609232237334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210609232246421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><p><a href="https://github.com/1105358600/Qusetion_Answer">https://github.com/1105358600/Qusetion_Answer</a></p>]]></content>
    
    
    <summary type="html">基于SSM的在线提问、回答系统</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="JavaWeb" scheme="https://pistachiout.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>基于SSM框架的网上购物送货系统</title>
    <link href="https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8ESSM%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E9%80%81%E8%B4%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://pistachiout.github.io/wiki/%E5%9F%BA%E4%BA%8ESSM%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BD%91%E4%B8%8A%E8%B4%AD%E7%89%A9%E9%80%81%E8%B4%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-02-16T10:54:55.112Z</published>
    <updated>2023-02-23T09:11:45.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于SSM框架的网上购物送货系统"><a href="#基于SSM框架的网上购物送货系统" class="headerlink" title="基于SSM框架的网上购物送货系统"></a>基于SSM框架的网上购物送货系统</h1><p>系统开发平台：Tomcat8.0 + JDK1.8 + Windows10</p><p>开发语言：JavaEE</p><p>JAR包管理：Maven3.6.1</p><p>前端：jQuery html5&#x2F;css3</p><p>后台</p><p>核心架构：SpringBoot</p><p>Web框架：SpringMVC</p><p>持久层框架：Mybatis</p><p>模板引擎：Thymeleaf</p><p>数据库：Mysql</p><h1 id="1-系统参与角色：管理者、购物者、送货员。"><a href="#1-系统参与角色：管理者、购物者、送货员。" class="headerlink" title="1.系统参与角色：管理者、购物者、送货员。"></a>1.系统参与角色：管理者、购物者、送货员。</h1><pre><code>1. 管理者：负责管理商品，提供商品信息，处理订单事务，系统的日常维护，控制超市状态。   2. 购物者：在线注册账户，更新个人信息，管理账户，搜索浏览商品，管理购物车，支付订单，申请退款，留言以及售后评价。3. 送货员：注册成为送货员，更新个人信息，查看订单信息。</code></pre><h1 id="2-系统应用场景"><a href="#2-系统应用场景" class="headerlink" title="2.系统应用场景"></a>2.系统应用场景</h1><pre><code>1. 活动泳道图之管理者   在现实应用中，管理员可以通过管理员界面进行登录，然后管理商品，账号等信息。也可以设置超市公告，查看销售情况和订单信息等     ![在这里插入图片描述](https://img-blog.csdnimg.cn/2021060818403134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70)     2.活动泳道图之购物者     在现实应用中，购物者可以通过顾客界面进行登录，然后查看商品并对其进行各项操作，包括加入购物车和购买支付等，也可以管理自身信息，留言     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210608184128986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70)     3.活动泳道图之送货员     在现实应用中，送货员可以通过送货员界面进行登录，然后管理自身信息，也可以查看订单信息并操作     ![在这里插入图片描述](https://img-blog.csdnimg.cn/20210608184148729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70)</code></pre><h1 id="3-1需求模型"><a href="#3-1需求模型" class="headerlink" title="3.1需求模型"></a>3.1需求模型</h1><p>1.购物者业务流程图<br><img data-src="https://img-blog.csdnimg.cn/20210608184235672.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.管理员业务流程图<br><img data-src="https://img-blog.csdnimg.cn/20210608184255367.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.送货员业务流程图<br><img data-src="https://img-blog.csdnimg.cn/20210608184319379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.订单管理业务流程图<img data-src="https://img-blog.csdnimg.cn/20210608184331814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-2功能模型"><a href="#3-2功能模型" class="headerlink" title="3.2功能模型"></a>3.2功能模型</h1><p><img data-src="https://img-blog.csdnimg.cn/20210608184355428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-3用例模型"><a href="#3-3用例模型" class="headerlink" title="3.3用例模型"></a>3.3用例模型</h1><p><img data-src="https://img-blog.csdnimg.cn/20210608184415142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="管理员用例图"><br><img data-src="https://img-blog.csdnimg.cn/20210608184428959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="用户用例图"></p><h1 id="4-系统截图"><a href="#4-系统截图" class="headerlink" title="4.系统截图"></a>4.系统截图</h1><h2 id="用户页面"><a href="#用户页面" class="headerlink" title="用户页面"></a>用户页面</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608184503797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184510432.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210608184524871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210608184536654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img data-src="https://img-blog.csdnimg.cn/20210608184547955.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="送货员页面"><a href="#送货员页面" class="headerlink" title="送货员页面"></a>送货员页面</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608184554927.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="管理员页面"><a href="#管理员页面" class="headerlink" title="管理员页面"></a>管理员页面</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608184602245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184655151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184703440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184707731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184713690.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2021060818471891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-难点实现"><a href="#5-难点实现" class="headerlink" title="5.难点实现"></a>5.难点实现</h1><h2 id="2-支付宝支付实现"><a href="#2-支付宝支付实现" class="headerlink" title="2.支付宝支付实现"></a>2.支付宝支付实现</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608184909336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184919841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>!<img data-src="https://img-blog.csdnimg.cn/20210608184954909.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608184959606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/2021060818500414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608185009984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-服务器的搭建"><a href="#2-服务器的搭建" class="headerlink" title="2.服务器的搭建"></a>2.服务器的搭建</h2><p>服务器搭建教程：<br><a href="https://blog.csdn.net/qq_35206244/article/details/83184173">https://blog.csdn.net/qq_35206244&#x2F;article&#x2F;details&#x2F;83184173</a><br><a href="https://blog.csdn.net/Aidiying/article/details/84442638">https://blog.csdn.net/Aidiying/article/details/84442638</a><br>为了实现用户的远程操作，我们把项目部署到了云服务器上，云服务器可以节省经济成本，又节约了大量时间。我们项目用的是腾讯云服务器。<br><img data-src="https://img-blog.csdnimg.cn/20210608185540462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608185544291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20210608185559940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-销量图表"><a href="#3-销量图表" class="headerlink" title="3.销量图表"></a>3.销量图表</h2><p>为了方便管理员进货，我们利用图表来帮助管理员了解商城销售商品的数量以及占比，利用ECharts来将后台的销量数据可视化，以便于直观显示销量占比<br><img data-src="https://img-blog.csdnimg.cn/20210608185345574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-订单号设置随机数保证一定的并发性"><a href="#4-订单号设置随机数保证一定的并发性" class="headerlink" title="4.订单号设置随机数保证一定的并发性"></a>4.订单号设置随机数保证一定的并发性</h2><p>在购物时，会根据购物时间来生成订单号，为了避免多人同时购买商品时订单号重复使系统出现问题，我们利用ordernum++来生成不重复的订单号，保证一定程度的并发性。<br><img data-src="https://img-blog.csdnimg.cn/20210608185451284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-定时调用轮转实现图片轮换"><a href="#5-定时调用轮转实现图片轮换" class="headerlink" title="5.定时调用轮转实现图片轮换"></a>5.定时调用轮转实现图片轮换</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608185210643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="1.在jsp中创建容器用来存放图片2.在css中设置相关的样式3.js中的相关代码 1）从后台获取图片的地址 2）设置图片的轮转 3）轮转的具体实现4.定时调用轮转方法"></p><h2 id="6-按序排列"><a href="#6-按序排列" class="headerlink" title="6.按序排列"></a>6.按序排列</h2><p><img data-src="https://img-blog.csdnimg.cn/20210608185314220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="定义一个对象数组定义一个比较器--降序排列对象数组 按照某个属性 降序排列"></p><h1 id="6-源码地址："><a href="#6-源码地址：" class="headerlink" title="6.源码地址："></a>6.源码地址：</h1><p><a href="https://github.com/1105358600/MailSystem">https://github.com/1105358600/MailSystem</a></p>]]></content>
    
    
    <summary type="html">基于SSM框架的网上购物送货系统。系统参与角色：管理者、购物者、送货员。1. 管理者：负责管理商品，提供商品信息，处理订单事务，系统的日常维护，控制超市状态。   2. 购物者：在线注册账户，更新个人信息，管理账户，搜索浏览商品，管理购物车，支付订单，申请退款，留言以及售后评价。3. 送货员：注册成为送货员，更新个人信息，查看订单信息。</summary>
    
    
    
    <category term="计算机基础知识" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="编程语言" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="软件项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="Java" scheme="https://pistachiout.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/"/>
    
    <category term="项目" scheme="https://pistachiout.github.io/categories/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="JavaWeb" scheme="https://pistachiout.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Shiro学习笔记</title>
    <link href="https://pistachiout.github.io/wiki/Shiro%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://pistachiout.github.io/wiki/Shiro%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2023-02-16T10:54:55.098Z</published>
    <updated>2023-02-23T09:12:04.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Shiro"><a href="#1-Shiro" class="headerlink" title="1.Shiro"></a>1.<a href="http://shiro.apache.org/">Shiro</a></h1><p>Shiro 是一款主流的 Java 安全框架，它不依赖任何容器，可以独立运行在 Java SE 和 Java EE 项目中，它的主要作用是对访问系统的用户进行身份认证（身份认证也就是登录）、授权、会话管理、加密等操作,用来解决安全管理的系统化框架。</p><h1 id="2-Shiro-核心组件"><a href="#2-Shiro-核心组件" class="headerlink" title="2.Shiro 核心组件"></a>2.Shiro 核心组件</h1><p>权限安全管理 在一个系统中是必不可少的部分，也是决定系统安全质量的关键所在，一个系统的强大全靠权限安全模块支撑。<br>说起权限，之不难想到 RBAC（Role-Based Access Control，基于角色的访问控制） 这个权限模型，权限就是功能的意思，而 RBAC 简单的说就是由 用户、角色、权限 组成的，一个用户可以拥有若干角色，每一个角色也可以拥有若干权限，给用户赋予角色，给角色赋予权限。在这种模型中，用户与角色之间，角色与权限之间，一般都是多对多的关系。</p><p>1、UsernamePasswordToken，Shiro 用来封装用户登录信息，使用用户的登录信息来创建令牌 Token。</p><p>2、SecurityManager，Shiro 的核心部分，负责安全认证和授权。</p><p>3、Subject，Shiro 的一个抽象概念，包含了用户信息。</p><p>4、Realm，开发者自定义的模块，根据项目的需求，验证和授权的逻辑全部写在 Realm 中。</p><p>5、AuthenticationInfo，用户的角色信息集合，认证时使用。</p><p>6、AuthorzationInfo，角色的权限信息集合，授权时使用。</p><p>7、DefaultWebSecurityManager，安全管理器，开发者自定义的 Realm 需要注入到 DefaultWebSecurityManager 进行管理才能生效。</p><p>8、ShiroFilterFactoryBean，过滤器工厂，Shiro 的基本运行机制是开发者定制规则，Shiro 去执行，具体的执行操作就是由 ShiroFilterFactoryBean 创建的一个个 Filter 对象来完成。</p><p><img data-src="https://img-blog.csdnimg.cn/20210616210617578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODA4NzAw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-Spring-Boot-整合-Shiro"><a href="#3-Spring-Boot-整合-Shiro" class="headerlink" title="3.Spring Boot 整合 Shiro"></a>3.Spring Boot 整合 Shiro</h1><p>编写认证和授权规则：</p><ol><li><h3 id="认证过滤器"><a href="#认证过滤器" class="headerlink" title="认证过滤器"></a>认证过滤器</h3></li></ol><p>  anon：无需认证。</p><p>  authc：必须认证。</p><p>  authcBasic：需要通过 HTTPBasic 认证。</p><p>  user：不一定通过认证，只要曾经被 Shiro 记录即可，比如：记住我。</p><ol start="2"><li><h3 id="授权过滤器"><a href="#授权过滤器" class="headerlink" title="授权过滤器"></a>授权过滤器</h3></li></ol><p>  perms：必须拥有某个权限才能访问。</p><p>  role：必须拥有某个角色才能访问。</p><p>  port：请求的端口必须是指定值才可以。</p><p>  rest：请求必须基于 RESTful，POST、PUT、GET、DELETE。</p><p>  ssl：必须是安全的 URL 请求，协议 HTTPS。</p><p>  创建 3 个页面，main.html、manage.html、administrator.html，访问权限如下：</p><blockquote><p>1、必须登录才能访问 main.html<br> 2、当前用户必须拥有 manage 授权才能访问 manage.html<br>  3、当前用户必须拥有 administrator 角色才能访问 administrator.html</p></blockquote><h2 id="1、创建-Spring-Boot-应用，集成-Shiro-及相关组件，pom-xml"><a href="#1、创建-Spring-Boot-应用，集成-Shiro-及相关组件，pom-xml" class="headerlink" title="1、创建 Spring Boot 应用，集成 Shiro 及相关组件，pom.xml"></a>1、创建 Spring Boot 应用，集成 Shiro 及相关组件，pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、自定义-Shiro-过滤器"><a href="#2、自定义-Shiro-过滤器" class="headerlink" title="2、自定义 Shiro 过滤器"></a>2、自定义 Shiro 过滤器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccoutRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前登录的用户信息</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> (Account) subject.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置角色</span></span><br><span class="line">        Set&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        roles.add(account.getRole());</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>(roles);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置权限</span></span><br><span class="line">        info.addStringPermission(account.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.findByUsername(token.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(account != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(account,account.getPassword(),getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、配置类"><a href="#3、配置类" class="headerlink" title="3、配置类"></a>3、配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        factoryBean.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//权限设置</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;/main&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/manage&quot;</span>,<span class="string">&quot;perms[manage]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/administrator&quot;</span>,<span class="string">&quot;roles[administrator]&quot;</span>);</span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="comment">//设置登录页面</span></span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">        <span class="comment">//设置未授权页面</span></span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">securityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;accoutRealm&quot;)</span> AccoutRealm accoutRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        manager.setRealm(accoutRealm);</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AccoutRealm <span class="title function_">accoutRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccoutRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-Shiro-整合-Thymeleaf"><a href="#4-Shiro-整合-Thymeleaf" class="headerlink" title="4.Shiro 整合 Thymeleaf"></a>4.Shiro 整合 Thymeleaf</h1><h2 id="1、pom-xml-引入依赖"><a href="#1、pom-xml-引入依赖" class="headerlink" title="1、pom.xml 引入依赖"></a>1、pom.xml 引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、配置类添加-ShiroDialect"><a href="#2、配置类添加-ShiroDialect" class="headerlink" title="2、配置类添加 ShiroDialect"></a>2、配置类添加 ShiroDialect</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、index-html"><a href="#3、index-html" class="headerlink" title="3、index.html"></a>3、index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.account != null&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.account.username&#125;+&#x27;欢迎回来！&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/administrator&quot;</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">=&quot;/main&quot;&gt;main<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;manage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;manage&quot;</span>&gt;</span>manage<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;administrator&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/administrator&quot;</span>&gt;</span>administrator<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Shiro 是一款主流的 Java 安全框架，它不依赖任何容器，可以独立运行在 Java SE 和 Java EE 项目中，它的主要作用是对访问系统的用户进行身份认证（身份认证也就是登录）、授权、会话管理、加密等操作,用来解决安全管理的系统化框架。</summary>
    
    
    
    <category term="实用软件及工具" scheme="https://pistachiout.github.io/categories/%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
    
    <category term="学习笔记" scheme="https://pistachiout.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://pistachiout.github.io/tags/Java/"/>
    
    <category term="工具" scheme="https://pistachiout.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="学习笔记" scheme="https://pistachiout.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
